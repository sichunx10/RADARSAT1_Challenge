{"ast":null,"code":"var _jsxFileName = \"/Users/qisong/Documents/RADARSAT1_Challenge/src/api/Map.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nconst mapStyles = {\n  map: {\n    position: 'absolute',\n    width: '100%',\n    height: '80%'\n  }\n};\nexport class CurrentLocation extends React.Component {\n  constructor(props) {\n    super(props);\n    const _this$props$initialCe = this.props.initialCenter,\n          lat = _this$props$initialCe.lat,\n          lng = _this$props$initialCe.lng;\n    this.state = {\n      currentLocation: {\n        lat: lat,\n        lng: lng\n      }\n    };\n  }\n\n  componentDidMount() {\n    if (this.props.centerAroundCurrentLocation) {\n      if (navigator && navigator.geolocation) {\n        navigator.geolocation.getCurrentPosition(pos => {\n          const coords = pos.coords;\n          this.setState({\n            currentLocation: {\n              lat: coords.latitude,\n              lng: coords.longitude\n            }\n          });\n        });\n      }\n    }\n\n    this.loadMap();\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (prevProps.google !== this.props.google) {\n      this.loadMap();\n    }\n\n    if (prevState.currentLocation !== this.state.currentLocation) {\n      this.recenterMap();\n    }\n  }\n\n  loadMap() {\n    if (this.props && this.props.google) {\n      // checks if google is available\n      const google = this.props.google;\n      const maps = google.maps;\n      const mapRef = this.refs.map; // reference to the actual DOM element\n\n      const node = ReactDOM.findDOMNode(mapRef);\n      let zoom = this.props.zoom;\n      const _this$state$currentLo = this.state.currentLocation,\n            lat = _this$state$currentLo.lat,\n            lng = _this$state$currentLo.lng;\n      const center = new maps.LatLng(lat, lng);\n      const mapConfig = Object.assign({}, {\n        center: center,\n        zoom: zoom\n      }); // maps.Map() is constructor that instantiates the map\n\n      this.map = new maps.Map(node, mapConfig);\n    }\n  }\n\n  recenterMap() {\n    const map = this.map;\n    const current = this.state.currentLocation;\n    const google = this.props.google;\n    const maps = google.maps;\n\n    if (map) {\n      let center = new maps.LatLng(current.lat, current.lng);\n      map.panTo(center);\n    }\n  }\n\n  renderChildren() {\n    const children = this.props.children;\n    if (!children) return;\n    return React.Children.map(children, c => {\n      if (!c) return;\n      return React.cloneElement(c, {\n        map: this.map,\n        google: this.props.google,\n        mapCenter: this.state.currentLocation\n      });\n    });\n  }\n\n  render() {\n    const style = Object.assign({}, mapStyles.map);\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      style: style,\n      ref: \"map\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108\n      },\n      __self: this\n    }, \"Loading map...\"), this.renderChildren());\n  }\n\n}\nexport default CurrentLocation;\nCurrentLocation.defaultProps = {\n  zoom: 3.5,\n  initialCenter: {\n    lat: 56.1304,\n    lng: -106.3468\n  },\n  centerAroundCurrentLocation: false,\n  visible: true\n};","map":{"version":3,"sources":["/Users/qisong/Documents/RADARSAT1_Challenge/src/api/Map.js"],"names":["React","ReactDOM","mapStyles","map","position","width","height","CurrentLocation","Component","constructor","props","initialCenter","lat","lng","state","currentLocation","componentDidMount","centerAroundCurrentLocation","navigator","geolocation","getCurrentPosition","pos","coords","setState","latitude","longitude","loadMap","componentDidUpdate","prevProps","prevState","google","recenterMap","maps","mapRef","refs","node","findDOMNode","zoom","center","LatLng","mapConfig","Object","assign","Map","current","panTo","renderChildren","children","Children","c","cloneElement","mapCenter","render","style","defaultProps","visible"],"mappings":"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","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\n\nconst mapStyles = {\n  map: {\n    position: 'absolute',\n    width: '100%',\n    height: '80%'\n  }\n};\nexport class CurrentLocation extends React.Component {\n  constructor(props) {\n    super(props);\n\n    const { lat, lng } = this.props.initialCenter;\n    this.state = {\n      currentLocation: {\n        lat: lat,\n        lng: lng\n      }\n    };\n  }\n  componentDidMount() {\n    if (this.props.centerAroundCurrentLocation) {\n      if (navigator && navigator.geolocation) {\n        navigator.geolocation.getCurrentPosition(pos => {\n          const coords = pos.coords;\n          this.setState({\n            currentLocation: {\n              lat: coords.latitude,\n              lng: coords.longitude\n            }\n          });\n        });\n      }\n    }\n    this.loadMap();\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (prevProps.google !== this.props.google) {\n      this.loadMap();\n    }\n    if (prevState.currentLocation !== this.state.currentLocation) {\n      this.recenterMap();\n    }\n  }\n\n  loadMap() {\n    if (this.props && this.props.google) {\n      // checks if google is available\n      const { google } = this.props;\n      const maps = google.maps;\n\n      const mapRef = this.refs.map;\n\n      // reference to the actual DOM element\n      const node = ReactDOM.findDOMNode(mapRef);\n\n      let { zoom } = this.props;\n      const { lat, lng } = this.state.currentLocation;\n      const center = new maps.LatLng(lat, lng);\n      const mapConfig = Object.assign(\n        {},\n        {\n          center: center,\n          zoom: zoom\n        }\n      );\n      // maps.Map() is constructor that instantiates the map\n      this.map = new maps.Map(node, mapConfig);\n    }\n  }\n\n  recenterMap() {\n    const map = this.map;\n    const current = this.state.currentLocation;\n\n    const google = this.props.google;\n    const maps = google.maps;\n\n    if (map) {\n      let center = new maps.LatLng(current.lat, current.lng);\n      map.panTo(center);\n    }\n  }\n\n  renderChildren() {\n    const { children } = this.props;\n\n    if (!children) return;\n\n    return React.Children.map(children, c => {\n      if (!c) return;\n      return React.cloneElement(c, {\n        map: this.map,\n        google: this.props.google,\n        mapCenter: this.state.currentLocation\n      });\n    });\n  }\n\n  render() {\n    const style = Object.assign({}, mapStyles.map);\n\n    return (\n      <div>\n        <div style={style} ref=\"map\">\n          Loading map...\n        </div>\n        {this.renderChildren()}\n      </div>\n    );\n  }\n}\nexport default CurrentLocation;\n\nCurrentLocation.defaultProps = {\n  zoom: 3.5,\n  initialCenter: {\n    lat: 56.1304,\n    lng: -106.3468\n  },\n  centerAroundCurrentLocation: false,\n  visible: true\n};\n"]},"metadata":{},"sourceType":"module"}