{"ast":null,"code":"import React from 'react';\nimport PropTypes from 'prop-types';\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) {\n  return typeof obj;\n} : function (obj) {\n  return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n};\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nvar Geolocation = function (_React$Component) {\n  _inherits(Geolocation, _React$Component);\n\n  function Geolocation(props) {\n    _classCallCheck(this, Geolocation);\n\n    var _this = _possibleConstructorReturn(this, _React$Component.call(this, props));\n\n    _this.getCurrentPosition = function () {\n      var _this$props = _this.props,\n          enableHighAccuracy = _this$props.enableHighAccuracy,\n          timeout = _this$props.timeout,\n          maximumAge = _this$props.maximumAge,\n          onSuccess = _this$props.onSuccess,\n          onError = _this$props.onError;\n\n      _this.setState({\n        fetchingPosition: true\n      });\n\n      return window.navigator.geolocation.getCurrentPosition(function (position) {\n        if (_this.willUnmount) return;\n\n        _this.setState({\n          position: position,\n          fetchingPosition: false\n        }, function () {\n          return onSuccess(position);\n        });\n      }, function (error) {\n        if (_this.willUnmount) return;\n\n        _this.setState({\n          error: error,\n          fetchingPosition: false\n        }, function () {\n          return onError(error);\n        });\n      }, {\n        enableHighAccuracy: enableHighAccuracy,\n        timeout: timeout,\n        maximumAge: maximumAge\n      });\n    };\n\n    _this.state = {\n      fetchingPosition: false,\n      position: undefined,\n      error: undefined\n    };\n    return _this;\n  }\n\n  Geolocation.prototype.componentWillMount = function componentWillMount() {\n    if ((typeof window === 'undefined' ? 'undefined' : _typeof(window)) !== 'object') {\n      return;\n    }\n\n    if (!('geolocation' in window.navigator)) {\n      return;\n    }\n\n    if (this.props.lazy) {\n      return;\n    }\n\n    this.getCurrentPosition();\n  };\n\n  Geolocation.prototype.componentWillUnmount = function componentWillUnmount() {\n    this.willUnmount = true;\n  };\n\n  Geolocation.prototype.render = function render() {\n    if (!this.props.render) {\n      return null;\n    }\n\n    return this.props.render({\n      getCurrentPosition: this.getCurrentPosition,\n      fetchingPosition: this.state.fetchingPosition,\n      position: this.state.position,\n      error: this.state.error\n    }) || null;\n  };\n\n  return Geolocation;\n}(React.Component);\n\nGeolocation.propTypes = {\n  // https://developer.mozilla.org/en-US/docs/Web/API/PositionOptions\n  enableHighAccuracy: PropTypes.bool,\n  timeout: PropTypes.number,\n  maximumAge: PropTypes.number,\n  // https://developer.mozilla.org/en-US/docs/Web/API/Geolocation/getCurrentPosition\n  onSuccess: PropTypes.func,\n  onError: PropTypes.func,\n  // Do not call getCurrentPosition on mount\n  lazy: PropTypes.bool\n};\nGeolocation.defaultProps = {\n  enableHighAccuracy: false,\n  timeout: Infinity,\n  maximumAge: 0,\n  onSuccess: function onSuccess(pos) {},\n  // eslint-disable-next-line handle-callback-err\n  onError: function onError(err) {},\n  lazy: false\n};\nexport default Geolocation;","map":null,"metadata":{},"sourceType":"module"}