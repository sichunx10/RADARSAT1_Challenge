import React from 'react';
import PropTypes from 'prop-types';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Geolocation = function (_React$Component) {
  _inherits(Geolocation, _React$Component);

  function Geolocation(props) {
    _classCallCheck(this, Geolocation);

    var _this = _possibleConstructorReturn(this, _React$Component.call(this, props));

    _this.getCurrentPosition = function () {
      var _this$props = _this.props,
          enableHighAccuracy = _this$props.enableHighAccuracy,
          timeout = _this$props.timeout,
          maximumAge = _this$props.maximumAge,
          onSuccess = _this$props.onSuccess,
          onError = _this$props.onError;


      _this.setState({ fetchingPosition: true });

      return window.navigator.geolocation.getCurrentPosition(function (position) {
        if (_this.willUnmount) return;

        _this.setState({ position: position, fetchingPosition: false }, function () {
          return onSuccess(position);
        });
      }, function (error) {
        if (_this.willUnmount) return;

        _this.setState({ error: error, fetchingPosition: false }, function () {
          return onError(error);
        });
      }, { enableHighAccuracy: enableHighAccuracy, timeout: timeout, maximumAge: maximumAge });
    };

    _this.state = {
      fetchingPosition: false,
      position: undefined,
      error: undefined
    };
    return _this;
  }

  Geolocation.prototype.componentWillMount = function componentWillMount() {
    if ((typeof window === 'undefined' ? 'undefined' : _typeof(window)) !== 'object') {
      return;
    }

    if (!('geolocation' in window.navigator)) {
      return;
    }

    if (this.props.lazy) {
      return;
    }

    this.getCurrentPosition();
  };

  Geolocation.prototype.componentWillUnmount = function componentWillUnmount() {
    this.willUnmount = true;
  };

  Geolocation.prototype.render = function render() {
    if (!this.props.render) {
      return null;
    }
    return this.props.render({
      getCurrentPosition: this.getCurrentPosition,
      fetchingPosition: this.state.fetchingPosition,
      position: this.state.position,
      error: this.state.error
    }) || null;
  };

  return Geolocation;
}(React.Component);

Geolocation.propTypes = {
  // https://developer.mozilla.org/en-US/docs/Web/API/PositionOptions
  enableHighAccuracy: PropTypes.bool,
  timeout: PropTypes.number,
  maximumAge: PropTypes.number,
  // https://developer.mozilla.org/en-US/docs/Web/API/Geolocation/getCurrentPosition
  onSuccess: PropTypes.func,
  onError: PropTypes.func,
  // Do not call getCurrentPosition on mount
  lazy: PropTypes.bool
};

Geolocation.defaultProps = {
  enableHighAccuracy: false,
  timeout: Infinity,
  maximumAge: 0,
  onSuccess: function onSuccess(pos) {},
  // eslint-disable-next-line handle-callback-err
  onError: function onError(err) {},
  lazy: false
};

export default Geolocation;
//# sourceMappingURL=react-geolocation.es.js.map
