{"version":3,"file":"downshift.umd.min.js","sources":["../../node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js","../../node_modules/@babel/runtime/helpers/esm/extends.js","../../node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js","../../node_modules/react-is/cjs/react-is.production.min.js","../../node_modules/react-is/index.js","../../node_modules/compute-scroll-into-view/es/index.js","../../src/utils.js","../../src/set-a11y-status.js","../../src/stateChangeTypes.js","../../src/downshift.js","../../node_modules/@babel/runtime/helpers/esm/inheritsLoose.js","../../node_modules/@reach/auto-id/es/index.js","../../src/hooks/utils.js","../../src/hooks/useSelect/utils.js","../../src/hooks/useSelect/stateChangeTypes.js","../../src/hooks/useSelect/reducer.js","../../src/hooks/useSelect/index.js"],"sourcesContent":["export default function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}","export default function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}","export default function _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}","/** @license React v16.9.0\n * react-is.production.min.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';Object.defineProperty(exports,\"__esModule\",{value:!0});\nvar b=\"function\"===typeof Symbol&&Symbol.for,c=b?Symbol.for(\"react.element\"):60103,d=b?Symbol.for(\"react.portal\"):60106,e=b?Symbol.for(\"react.fragment\"):60107,f=b?Symbol.for(\"react.strict_mode\"):60108,g=b?Symbol.for(\"react.profiler\"):60114,h=b?Symbol.for(\"react.provider\"):60109,k=b?Symbol.for(\"react.context\"):60110,l=b?Symbol.for(\"react.async_mode\"):60111,m=b?Symbol.for(\"react.concurrent_mode\"):60111,n=b?Symbol.for(\"react.forward_ref\"):60112,p=b?Symbol.for(\"react.suspense\"):60113,q=b?Symbol.for(\"react.suspense_list\"):\n60120,r=b?Symbol.for(\"react.memo\"):60115,t=b?Symbol.for(\"react.lazy\"):60116,v=b?Symbol.for(\"react.fundamental\"):60117,w=b?Symbol.for(\"react.responder\"):60118;function x(a){if(\"object\"===typeof a&&null!==a){var u=a.$$typeof;switch(u){case c:switch(a=a.type,a){case l:case m:case e:case g:case f:case p:return a;default:switch(a=a&&a.$$typeof,a){case k:case n:case h:return a;default:return u}}case t:case r:case d:return u}}}function y(a){return x(a)===m}exports.typeOf=x;exports.AsyncMode=l;\nexports.ConcurrentMode=m;exports.ContextConsumer=k;exports.ContextProvider=h;exports.Element=c;exports.ForwardRef=n;exports.Fragment=e;exports.Lazy=t;exports.Memo=r;exports.Portal=d;exports.Profiler=g;exports.StrictMode=f;exports.Suspense=p;\nexports.isValidElementType=function(a){return\"string\"===typeof a||\"function\"===typeof a||a===e||a===m||a===g||a===f||a===p||a===q||\"object\"===typeof a&&null!==a&&(a.$$typeof===t||a.$$typeof===r||a.$$typeof===h||a.$$typeof===k||a.$$typeof===n||a.$$typeof===v||a.$$typeof===w)};exports.isAsyncMode=function(a){return y(a)||x(a)===l};exports.isConcurrentMode=y;exports.isContextConsumer=function(a){return x(a)===k};exports.isContextProvider=function(a){return x(a)===h};\nexports.isElement=function(a){return\"object\"===typeof a&&null!==a&&a.$$typeof===c};exports.isForwardRef=function(a){return x(a)===n};exports.isFragment=function(a){return x(a)===e};exports.isLazy=function(a){return x(a)===t};exports.isMemo=function(a){return x(a)===r};exports.isPortal=function(a){return x(a)===d};exports.isProfiler=function(a){return x(a)===g};exports.isStrictMode=function(a){return x(a)===f};exports.isSuspense=function(a){return x(a)===p};\n","'use strict';\n\nif (process.env.NODE_ENV === 'production') {\n  module.exports = require('./cjs/react-is.production.min.js');\n} else {\n  module.exports = require('./cjs/react-is.development.js');\n}\n","function isElement(el) {\n  return el != null && typeof el === 'object' && el.nodeType === 1;\n}\n\nfunction canOverflow(overflow, skipOverflowHiddenElements) {\n  if (skipOverflowHiddenElements && overflow === 'hidden') {\n    return false;\n  }\n\n  return overflow !== 'visible' && overflow !== 'clip';\n}\n\nfunction isScrollable(el, skipOverflowHiddenElements) {\n  if (el.clientHeight < el.scrollHeight || el.clientWidth < el.scrollWidth) {\n    var style = getComputedStyle(el, null);\n    return canOverflow(style.overflowY, skipOverflowHiddenElements) || canOverflow(style.overflowX, skipOverflowHiddenElements);\n  }\n\n  return false;\n}\n\nfunction alignNearest(scrollingEdgeStart, scrollingEdgeEnd, scrollingSize, scrollingBorderStart, scrollingBorderEnd, elementEdgeStart, elementEdgeEnd, elementSize) {\n  if (elementEdgeStart < scrollingEdgeStart && elementEdgeEnd > scrollingEdgeEnd || elementEdgeStart > scrollingEdgeStart && elementEdgeEnd < scrollingEdgeEnd) {\n    return 0;\n  }\n\n  if (elementEdgeStart <= scrollingEdgeStart && elementSize <= scrollingSize || elementEdgeEnd >= scrollingEdgeEnd && elementSize >= scrollingSize) {\n    return elementEdgeStart - scrollingEdgeStart - scrollingBorderStart;\n  }\n\n  if (elementEdgeEnd > scrollingEdgeEnd && elementSize < scrollingSize || elementEdgeStart < scrollingEdgeStart && elementSize > scrollingSize) {\n    return elementEdgeEnd - scrollingEdgeEnd + scrollingBorderEnd;\n  }\n\n  return 0;\n}\n\nexport default (function (target, options) {\n  var scrollMode = options.scrollMode,\n      block = options.block,\n      inline = options.inline,\n      boundary = options.boundary,\n      skipOverflowHiddenElements = options.skipOverflowHiddenElements;\n  var checkBoundary = typeof boundary === 'function' ? boundary : function (node) {\n    return node !== boundary;\n  };\n\n  if (!isElement(target)) {\n    throw new TypeError('Invalid target');\n  }\n\n  var scrollingElement = document.scrollingElement || document.documentElement;\n  var frames = [];\n  var cursor = target;\n\n  while (isElement(cursor) && checkBoundary(cursor)) {\n    cursor = cursor.parentNode;\n\n    if (cursor === scrollingElement) {\n      frames.push(cursor);\n      break;\n    }\n\n    if (cursor === document.body && isScrollable(cursor) && !isScrollable(document.documentElement)) {\n      continue;\n    }\n\n    if (isScrollable(cursor, skipOverflowHiddenElements)) {\n      frames.push(cursor);\n    }\n  }\n\n  var viewportWidth = window.visualViewport ? visualViewport.width : innerWidth;\n  var viewportHeight = window.visualViewport ? visualViewport.height : innerHeight;\n  var viewportX = window.scrollX || pageXOffset;\n  var viewportY = window.scrollY || pageYOffset;\n\n  var _target$getBoundingCl = target.getBoundingClientRect(),\n      targetHeight = _target$getBoundingCl.height,\n      targetWidth = _target$getBoundingCl.width,\n      targetTop = _target$getBoundingCl.top,\n      targetRight = _target$getBoundingCl.right,\n      targetBottom = _target$getBoundingCl.bottom,\n      targetLeft = _target$getBoundingCl.left;\n\n  var targetBlock = block === 'start' || block === 'nearest' ? targetTop : block === 'end' ? targetBottom : targetTop + targetHeight / 2;\n  var targetInline = inline === 'center' ? targetLeft + targetWidth / 2 : inline === 'end' ? targetRight : targetLeft;\n  var computations = [];\n\n  for (var index = 0; index < frames.length; index++) {\n    var frame = frames[index];\n\n    var _frame$getBoundingCli = frame.getBoundingClientRect(),\n        _height = _frame$getBoundingCli.height,\n        _width = _frame$getBoundingCli.width,\n        _top = _frame$getBoundingCli.top,\n        right = _frame$getBoundingCli.right,\n        bottom = _frame$getBoundingCli.bottom,\n        _left = _frame$getBoundingCli.left;\n\n    if (scrollMode === 'if-needed' && targetTop >= 0 && targetLeft >= 0 && targetBottom <= viewportHeight && targetRight <= viewportWidth && targetTop >= _top && targetBottom <= bottom && targetLeft >= _left && targetRight <= right) {\n      return computations;\n    }\n\n    var frameStyle = getComputedStyle(frame);\n    var borderLeft = parseInt(frameStyle.borderLeftWidth, 10);\n    var borderTop = parseInt(frameStyle.borderTopWidth, 10);\n    var borderRight = parseInt(frameStyle.borderRightWidth, 10);\n    var borderBottom = parseInt(frameStyle.borderBottomWidth, 10);\n    var blockScroll = 0;\n    var inlineScroll = 0;\n    var scrollbarWidth = 'offsetWidth' in frame ? frame.offsetWidth - frame.clientWidth - borderLeft - borderRight : 0;\n    var scrollbarHeight = 'offsetHeight' in frame ? frame.offsetHeight - frame.clientHeight - borderTop - borderBottom : 0;\n\n    if (scrollingElement === frame) {\n      if (block === 'start') {\n        blockScroll = targetBlock;\n      } else if (block === 'end') {\n        blockScroll = targetBlock - viewportHeight;\n      } else if (block === 'nearest') {\n        blockScroll = alignNearest(viewportY, viewportY + viewportHeight, viewportHeight, borderTop, borderBottom, viewportY + targetBlock, viewportY + targetBlock + targetHeight, targetHeight);\n      } else {\n        blockScroll = targetBlock - viewportHeight / 2;\n      }\n\n      if (inline === 'start') {\n        inlineScroll = targetInline;\n      } else if (inline === 'center') {\n        inlineScroll = targetInline - viewportWidth / 2;\n      } else if (inline === 'end') {\n        inlineScroll = targetInline - viewportWidth;\n      } else {\n        inlineScroll = alignNearest(viewportX, viewportX + viewportWidth, viewportWidth, borderLeft, borderRight, viewportX + targetInline, viewportX + targetInline + targetWidth, targetWidth);\n      }\n\n      blockScroll = Math.max(0, blockScroll + viewportY);\n      inlineScroll = Math.max(0, inlineScroll + viewportX);\n    } else {\n      if (block === 'start') {\n        blockScroll = targetBlock - _top - borderTop;\n      } else if (block === 'end') {\n        blockScroll = targetBlock - bottom + borderBottom + scrollbarHeight;\n      } else if (block === 'nearest') {\n        blockScroll = alignNearest(_top, bottom, _height, borderTop, borderBottom + scrollbarHeight, targetBlock, targetBlock + targetHeight, targetHeight);\n      } else {\n        blockScroll = targetBlock - (_top + _height / 2) + scrollbarHeight / 2;\n      }\n\n      if (inline === 'start') {\n        inlineScroll = targetInline - _left - borderLeft;\n      } else if (inline === 'center') {\n        inlineScroll = targetInline - (_left + _width / 2) + scrollbarWidth / 2;\n      } else if (inline === 'end') {\n        inlineScroll = targetInline - right + borderRight + scrollbarWidth;\n      } else {\n        inlineScroll = alignNearest(_left, right, _width, borderLeft, borderRight + scrollbarWidth, targetInline, targetInline + targetWidth, targetWidth);\n      }\n\n      var scrollLeft = frame.scrollLeft,\n          scrollTop = frame.scrollTop;\n      blockScroll = Math.max(0, Math.min(scrollTop + blockScroll, frame.scrollHeight - _height + scrollbarHeight));\n      inlineScroll = Math.max(0, Math.min(scrollLeft + inlineScroll, frame.scrollWidth - _width + scrollbarWidth));\n      targetBlock += scrollTop - blockScroll;\n      targetInline += scrollLeft - inlineScroll;\n    }\n\n    computations.push({\n      el: frame,\n      top: blockScroll,\n      left: inlineScroll\n    });\n  }\n\n  return computations;\n});","import computeScrollIntoView from 'compute-scroll-into-view'\nimport {isPreact} from './is.macro'\n\nlet idCounter = 0\n\n/**\n * Accepts a parameter and returns it if it's a function\n * or a noop function if it's not. This allows us to\n * accept a callback, but not worry about it if it's not\n * passed.\n * @param {Function} cb the callback\n * @return {Function} a function\n */\nfunction cbToCb(cb) {\n  return typeof cb === 'function' ? cb : noop\n}\n\nfunction noop() {}\n\n/**\n * Scroll node into view if necessary\n * @param {HTMLElement} node the element that should scroll into view\n * @param {HTMLElement} menuNode the menu element of the component\n */\nfunction scrollIntoView(node, menuNode) {\n  if (node === null) {\n    return\n  }\n\n  const actions = computeScrollIntoView(node, {\n    boundary: menuNode,\n    block: 'nearest',\n    scrollMode: 'if-needed',\n  })\n  actions.forEach(({el, top, left}) => {\n    el.scrollTop = top\n    el.scrollLeft = left\n  })\n}\n\n/**\n * @param {HTMLElement} parent the parent node\n * @param {HTMLElement} child the child node\n * @return {Boolean} whether the parent is the child or the child is in the parent\n */\nfunction isOrContainsNode(parent, child) {\n  return parent === child || (parent.contains && parent.contains(child))\n}\n\n/**\n * Simple debounce implementation. Will call the given\n * function once after the time given has passed since\n * it was last called.\n * @param {Function} fn the function to call after the time\n * @param {Number} time the time to wait\n * @return {Function} the debounced function\n */\nfunction debounce(fn, time) {\n  let timeoutId\n\n  function cancel() {\n    if (timeoutId) {\n      clearTimeout(timeoutId)\n    }\n  }\n\n  function wrapper(...args) {\n    cancel()\n    timeoutId = setTimeout(() => {\n      timeoutId = null\n      fn(...args)\n    }, time)\n  }\n\n  wrapper.cancel = cancel\n\n  return wrapper\n}\n\n/**\n * This is intended to be used to compose event handlers.\n * They are executed in order until one of them sets\n * `event.preventDownshiftDefault = true`.\n * @param {...Function} fns the event handler functions\n * @return {Function} the event handler to add to an element\n */\nfunction callAllEventHandlers(...fns) {\n  return (event, ...args) =>\n    fns.some(fn => {\n      if (fn) {\n        fn(event, ...args)\n      }\n      return (\n        event.preventDownshiftDefault ||\n        (event.hasOwnProperty('nativeEvent') &&\n          event.nativeEvent.preventDownshiftDefault)\n      )\n    })\n}\n\n/**\n * This return a function that will call all the given functions with\n * the arguments with which it's called. It does a null-check before\n * attempting to call the functions and can take any number of functions.\n * @param {...Function} fns the functions to call\n * @return {Function} the function that calls all the functions\n */\nfunction callAll(...fns) {\n  return (...args) => {\n    fns.forEach(fn => {\n      if (fn) {\n        fn(...args)\n      }\n    })\n  }\n}\n\n/**\n * This generates a unique ID for an instance of Downshift\n * @return {String} the unique ID\n */\nfunction generateId() {\n  return String(idCounter++)\n}\n\n/**\n * This is only used in tests\n * @param {Number} num the number to set the idCounter to\n */\nfunction setIdCounter(num) {\n  idCounter = num\n}\n\n/**\n * Resets idCounter to 0. Used for SSR.\n */\nfunction resetIdCounter() {\n  idCounter = 0\n}\n\n/**\n * @param {Object} param the downshift state and other relevant properties\n * @return {String} the a11y status message\n */\nfunction getA11yStatusMessage({\n  isOpen,\n  selectedItem,\n  resultCount,\n  previousResultCount,\n  itemToString,\n}) {\n  if (!isOpen) {\n    return selectedItem ? itemToString(selectedItem) : ''\n  }\n  if (!resultCount) {\n    return 'No results are available.'\n  }\n  if (resultCount !== previousResultCount) {\n    return `${resultCount} result${\n      resultCount === 1 ? ' is' : 's are'\n    } available, use up and down arrow keys to navigate. Press Enter key to select.`\n  }\n  return ''\n}\n\n/**\n * Takes an argument and if it's an array, returns the first item in the array\n * otherwise returns the argument\n * @param {*} arg the maybe-array\n * @param {*} defaultValue the value if arg is falsey not defined\n * @return {*} the arg or it's first item\n */\nfunction unwrapArray(arg, defaultValue) {\n  arg = Array.isArray(arg) ? /* istanbul ignore next (preact) */ arg[0] : arg\n  if (!arg && defaultValue) {\n    return defaultValue\n  } else {\n    return arg\n  }\n}\n\n/**\n * @param {Object} element (P)react element\n * @return {Boolean} whether it's a DOM element\n */\nfunction isDOMElement(element) {\n  /* istanbul ignore if */\n  if (isPreact) {\n    // then this is preact\n    return typeof element.nodeName === 'string'\n  }\n\n  // then we assume this is react\n  return typeof element.type === 'string'\n}\n\n/**\n * @param {Object} element (P)react element\n * @return {Object} the props\n */\nfunction getElementProps(element) {\n  // props for react, attributes for preact\n\n  /* istanbul ignore if */\n  if (isPreact) {\n    return element.attributes\n  }\n\n  return element.props\n}\n\n/**\n * Throws a helpful error message for required properties. Useful\n * to be used as a default in destructuring or object params.\n * @param {String} fnName the function name\n * @param {String} propName the prop name\n */\nfunction requiredProp(fnName, propName) {\n  // eslint-disable-next-line no-console\n  console.error(`The property \"${propName}\" is required in \"${fnName}\"`)\n}\n\nconst stateKeys = [\n  'highlightedIndex',\n  'inputValue',\n  'isOpen',\n  'selectedItem',\n  'type',\n]\n/**\n * @param {Object} state the state object\n * @return {Object} state that is relevant to downshift\n */\nfunction pickState(state = {}) {\n  const result = {}\n  stateKeys.forEach(k => {\n    if (state.hasOwnProperty(k)) {\n      result[k] = state[k]\n    }\n  })\n  return result\n}\n\n/**\n * Normalizes the 'key' property of a KeyboardEvent in IE/Edge\n * @param {Object} event a keyboardEvent object\n * @return {String} keyboard key\n */\nfunction normalizeArrowKey(event) {\n  const {key, keyCode} = event\n  /* istanbul ignore next (ie) */\n  if (keyCode >= 37 && keyCode <= 40 && key.indexOf('Arrow') !== 0) {\n    return `Arrow${key}`\n  }\n  return key\n}\n\n/**\n * Simple check if the value passed is object literal\n * @param {*} obj any things\n * @return {Boolean} whether it's object literal\n */\nfunction isPlainObject(obj) {\n  return Object.prototype.toString.call(obj) === '[object Object]'\n}\n\n/**\n * Returns the new index in the list, in a circular way. If next value is out of bonds from the total,\n * it will wrap to either 0 or itemCount - 1.\n *\n * @param {number} moveAmount Number of positions to move. Negative to move backwards, positive forwards.\n * @param {number} baseIndex The initial position to move from.\n * @param {number} itemCount The total number of items.\n * @returns {number} The new index after the move.\n */\nfunction getNextWrappingIndex(moveAmount, baseIndex, itemCount) {\n  const itemsLastIndex = itemCount - 1\n\n  if (\n    typeof baseIndex !== 'number' ||\n    baseIndex < 0 ||\n    baseIndex >= itemCount\n  ) {\n    baseIndex = moveAmount > 0 ? -1 : itemsLastIndex + 1\n  }\n  let newIndex = baseIndex + moveAmount\n  if (newIndex < 0) {\n    newIndex = itemsLastIndex\n  } else if (newIndex > itemsLastIndex) {\n    newIndex = 0\n  }\n  return newIndex\n}\n\nexport {\n  cbToCb,\n  callAllEventHandlers,\n  callAll,\n  debounce,\n  scrollIntoView,\n  generateId,\n  getA11yStatusMessage,\n  unwrapArray,\n  isDOMElement,\n  getElementProps,\n  isOrContainsNode,\n  noop,\n  requiredProp,\n  setIdCounter,\n  resetIdCounter,\n  pickState,\n  isPlainObject,\n  normalizeArrowKey,\n  getNextWrappingIndex,\n}\n","import {debounce} from './utils'\n\nconst cleanupStatus = debounce(() => {\n  getStatusDiv().textContent = ''\n}, 500)\n\n/**\n * @param {String} status the status message\n * @param {Object} documentProp document passed by the user.\n */\nfunction setStatus(status, documentProp) {\n  const div = getStatusDiv(documentProp)\n  if (!status) {\n    return\n  }\n\n  div.textContent = status\n  cleanupStatus()\n}\n\n/**\n * Get the status node or create it if it does not already exist.\n * @param {Object} documentProp document passed by the user.\n * @return {HTMLElement} the status node.\n */\nfunction getStatusDiv(documentProp = document) {\n  let statusDiv = documentProp.getElementById('a11y-status-message')\n  if (statusDiv) {\n    return statusDiv\n  }\n\n  statusDiv = documentProp.createElement('div')\n  statusDiv.setAttribute('id', 'a11y-status-message')\n  statusDiv.setAttribute('role', 'status')\n  statusDiv.setAttribute('aria-live', 'polite')\n  statusDiv.setAttribute('aria-relevant', 'additions text')\n  Object.assign(statusDiv.style, {\n    border: '0',\n    clip: 'rect(0 0 0 0)',\n    height: '1px',\n    margin: '-1px',\n    overflow: 'hidden',\n    padding: '0',\n    position: 'absolute',\n    width: '1px',\n  })\n  documentProp.body.appendChild(statusDiv)\n  return statusDiv\n}\n\nexport default setStatus\n","import productionEnum from './productionEnum.macro'\n\nexport const unknown = productionEnum('__autocomplete_unknown__')\nexport const mouseUp = productionEnum('__autocomplete_mouseup__')\nexport const itemMouseEnter = productionEnum('__autocomplete_item_mouseenter__')\nexport const keyDownArrowUp = productionEnum(\n  '__autocomplete_keydown_arrow_up__',\n)\nexport const keyDownArrowDown = productionEnum(\n  '__autocomplete_keydown_arrow_down__',\n)\nexport const keyDownEscape = productionEnum('__autocomplete_keydown_escape__')\nexport const keyDownEnter = productionEnum('__autocomplete_keydown_enter__')\nexport const keyDownHome = productionEnum('__autocomplete_keydown_home__')\nexport const keyDownEnd = productionEnum('__autocomplete_keydown_end__')\nexport const clickItem = productionEnum('__autocomplete_click_item__')\nexport const blurInput = productionEnum('__autocomplete_blur_input__')\nexport const changeInput = productionEnum('__autocomplete_change_input__')\nexport const keyDownSpaceButton = productionEnum(\n  '__autocomplete_keydown_space_button__',\n)\nexport const clickButton = productionEnum('__autocomplete_click_button__')\nexport const blurButton = productionEnum('__autocomplete_blur_button__')\nexport const controlledPropUpdatedSelectedItem = productionEnum(\n  '__autocomplete_controlled_prop_updated_selected_item__',\n)\nexport const touchEnd = productionEnum('__autocomplete_touchend__')\n","/* eslint camelcase:0 */\n\nimport PropTypes from 'prop-types'\nimport React, {Component} from 'react'\nimport {isForwardRef} from 'react-is'\nimport {isPreact, isReactNative} from './is.macro'\nimport setA11yStatus from './set-a11y-status'\nimport * as stateChangeTypes from './stateChangeTypes'\nimport {\n  callAll,\n  callAllEventHandlers,\n  cbToCb,\n  debounce,\n  generateId,\n  getA11yStatusMessage,\n  getElementProps,\n  isDOMElement,\n  isOrContainsNode,\n  isPlainObject,\n  noop,\n  normalizeArrowKey,\n  pickState,\n  requiredProp,\n  scrollIntoView,\n  unwrapArray,\n  getNextWrappingIndex,\n} from './utils'\n\nclass Downshift extends Component {\n  static propTypes = {\n    children: PropTypes.func,\n    defaultHighlightedIndex: PropTypes.number,\n    defaultIsOpen: PropTypes.bool,\n    initialHighlightedIndex: PropTypes.number,\n    initialSelectedItem: PropTypes.any,\n    initialInputValue: PropTypes.string,\n    initialIsOpen: PropTypes.bool,\n    getA11yStatusMessage: PropTypes.func,\n    itemToString: PropTypes.func,\n    onChange: PropTypes.func,\n    onSelect: PropTypes.func,\n    onStateChange: PropTypes.func,\n    onInputValueChange: PropTypes.func,\n    onUserAction: PropTypes.func,\n    onOuterClick: PropTypes.func,\n    selectedItemChanged: PropTypes.func,\n    stateReducer: PropTypes.func,\n    itemCount: PropTypes.number,\n    id: PropTypes.string,\n    environment: PropTypes.shape({\n      addEventListener: PropTypes.func,\n      removeEventListener: PropTypes.func,\n      document: PropTypes.shape({\n        getElementById: PropTypes.func,\n        activeElement: PropTypes.any,\n        body: PropTypes.any,\n      }),\n    }),\n    suppressRefError: PropTypes.bool,\n    scrollIntoView: PropTypes.func,\n    // things we keep in state for uncontrolled components\n    // but can accept as props for controlled components\n    /* eslint-disable react/no-unused-prop-types */\n    selectedItem: PropTypes.any,\n    isOpen: PropTypes.bool,\n    inputValue: PropTypes.string,\n    highlightedIndex: PropTypes.number,\n    labelId: PropTypes.string,\n    inputId: PropTypes.string,\n    menuId: PropTypes.string,\n    getItemId: PropTypes.func,\n    /* eslint-enable react/no-unused-prop-types */\n  }\n\n  static defaultProps = {\n    defaultHighlightedIndex: null,\n    defaultIsOpen: false,\n    getA11yStatusMessage,\n    itemToString: i => {\n      if (i == null) {\n        return ''\n      }\n      if (\n        process.env.NODE_ENV !== 'production' &&\n        isPlainObject(i) &&\n        !i.hasOwnProperty('toString')\n      ) {\n        // eslint-disable-next-line no-console\n        console.warn(\n          'downshift: An object was passed to the default implementation of `itemToString`. You should probably provide your own `itemToString` implementation. Please refer to the `itemToString` API documentation.',\n          'The object that was passed:',\n          i,\n        )\n      }\n      return String(i)\n    },\n    onStateChange: noop,\n    onInputValueChange: noop,\n    onUserAction: noop,\n    onChange: noop,\n    onSelect: noop,\n    onOuterClick: noop,\n    selectedItemChanged: (prevItem, item) => prevItem !== item,\n    environment:\n      typeof window === 'undefined' /* istanbul ignore next (ssr) */\n        ? {}\n        : window,\n    stateReducer: (state, stateToSet) => stateToSet,\n    suppressRefError: false,\n    scrollIntoView,\n  }\n\n  static stateChangeTypes = stateChangeTypes\n\n  constructor(props) {\n    super(props)\n    // fancy destructuring + defaults + aliases\n    // this basically says each value of state should either be set to\n    // the initial value or the default value if the initial value is not provided\n    const {\n      defaultHighlightedIndex,\n      initialHighlightedIndex: highlightedIndex = defaultHighlightedIndex,\n      defaultIsOpen,\n      initialIsOpen: isOpen = defaultIsOpen,\n      initialInputValue: inputValue = '',\n      initialSelectedItem: selectedItem = null,\n    } = this.props\n    const state = this.getState({\n      highlightedIndex,\n      isOpen,\n      inputValue,\n      selectedItem,\n    })\n    if (\n      state.selectedItem != null &&\n      this.props.initialInputValue === undefined\n    ) {\n      state.inputValue = this.props.itemToString(state.selectedItem)\n    }\n    this.state = state\n  }\n\n  id = this.props.id || `downshift-${generateId()}`\n  menuId = this.props.menuId || `${this.id}-menu`\n  labelId = this.props.labelId || `${this.id}-label`\n  inputId = this.props.inputId || `${this.id}-input`\n  getItemId = this.props.getItemId || (index => `${this.id}-item-${index}`)\n\n  input = null\n  items = []\n  // itemCount can be changed asynchronously\n  // from within downshift (so it can't come from a prop)\n  // this is why we store it as an instance and use\n  // getItemCount rather than just use items.length\n  // (to support windowing + async)\n  itemCount = null\n  previousResultCount = 0\n\n  timeoutIds = []\n\n  /**\n   * @param {Function} fn the function to call after the time\n   * @param {Number} time the time to wait\n   */\n  internalSetTimeout = (fn, time) => {\n    const id = setTimeout(() => {\n      this.timeoutIds = this.timeoutIds.filter(i => i !== id)\n      fn()\n    }, time)\n\n    this.timeoutIds.push(id)\n  }\n\n  /**\n   * Clear all running timeouts\n   */\n  internalClearTimeouts() {\n    this.timeoutIds.forEach(id => {\n      clearTimeout(id)\n    })\n\n    this.timeoutIds = []\n  }\n\n  /**\n   * Gets the state based on internal state or props\n   * If a state value is passed via props, then that\n   * is the value given, otherwise it's retrieved from\n   * stateToMerge\n   *\n   * This will perform a shallow merge of the given state object\n   * with the state coming from props\n   * (for the controlled component scenario)\n   * This is used in state updater functions so they're referencing\n   * the right state regardless of where it comes from.\n   *\n   * @param {Object} stateToMerge defaults to this.state\n   * @return {Object} the state\n   */\n  getState(stateToMerge = this.state) {\n    return Object.keys(stateToMerge).reduce((state, key) => {\n      state[key] = this.isControlledProp(key)\n        ? this.props[key]\n        : stateToMerge[key]\n      return state\n    }, {})\n  }\n\n  /**\n   * This determines whether a prop is a \"controlled prop\" meaning it is\n   * state which is controlled by the outside of this component rather\n   * than within this component.\n   * @param {String} key the key to check\n   * @return {Boolean} whether it is a controlled controlled prop\n   */\n  isControlledProp(key) {\n    return this.props[key] !== undefined\n  }\n\n  getItemCount() {\n    // things read better this way. They're in priority order:\n    // 1. `this.itemCount`\n    // 2. `this.props.itemCount`\n    // 3. `this.items.length`\n    let itemCount = this.items.length\n    if (this.itemCount != null) {\n      itemCount = this.itemCount\n    } else if (this.props.itemCount !== undefined) {\n      itemCount = this.props.itemCount\n    }\n    return itemCount\n  }\n\n  setItemCount = count => {\n    this.itemCount = count\n  }\n\n  unsetItemCount = () => {\n    this.itemCount = null\n  }\n\n  getItemNodeFromIndex(index) {\n    return this.props.environment.document.getElementById(this.getItemId(index))\n  }\n\n  setHighlightedIndex = (\n    highlightedIndex = this.props.defaultHighlightedIndex,\n    otherStateToSet = {},\n  ) => {\n    otherStateToSet = pickState(otherStateToSet)\n    this.internalSetState({highlightedIndex, ...otherStateToSet})\n  }\n\n  scrollHighlightedItemIntoView() {\n    /* istanbul ignore else (react-native) */\n    if (!isReactNative) {\n      const node = this.getItemNodeFromIndex(this.getState().highlightedIndex)\n      this.props.scrollIntoView(node, this._menuNode)\n    }\n  }\n\n  moveHighlightedIndex(amount, otherStateToSet) {\n    const itemCount = this.getItemCount()\n    if (itemCount > 0) {\n      const nextHighlightedIndex = getNextWrappingIndex(\n        amount,\n        this.getState().highlightedIndex,\n        itemCount,\n      )\n      this.setHighlightedIndex(nextHighlightedIndex, otherStateToSet)\n    }\n  }\n\n  highlightFirstOrLastIndex(event, first, otherStateToSet) {\n    const itemsLastIndex = this.getItemCount() - 1\n    if (itemsLastIndex < 0 || !this.getState().isOpen) {\n      return\n    }\n    event.preventDefault()\n    this.setHighlightedIndex(first ? 0 : itemsLastIndex, otherStateToSet)\n  }\n\n  clearSelection = cb => {\n    this.internalSetState(\n      {\n        selectedItem: null,\n        inputValue: '',\n        highlightedIndex: this.props.defaultHighlightedIndex,\n        isOpen: this.props.defaultIsOpen,\n      },\n      cb,\n    )\n  }\n\n  selectItem = (item, otherStateToSet, cb) => {\n    otherStateToSet = pickState(otherStateToSet)\n    this.internalSetState(\n      {\n        isOpen: this.props.defaultIsOpen,\n        highlightedIndex: this.props.defaultHighlightedIndex,\n        selectedItem: item,\n        inputValue: this.props.itemToString(item),\n        ...otherStateToSet,\n      },\n      cb,\n    )\n  }\n\n  selectItemAtIndex = (itemIndex, otherStateToSet, cb) => {\n    const item = this.items[itemIndex]\n    if (item == null) {\n      return\n    }\n    this.selectItem(item, otherStateToSet, cb)\n  }\n\n  selectHighlightedItem = (otherStateToSet, cb) => {\n    return this.selectItemAtIndex(\n      this.getState().highlightedIndex,\n      otherStateToSet,\n      cb,\n    )\n  }\n\n  // any piece of our state can live in two places:\n  // 1. Uncontrolled: it's internal (this.state)\n  //    We will call this.setState to update that state\n  // 2. Controlled: it's external (this.props)\n  //    We will call this.props.onStateChange to update that state\n  //\n  // In addition, we'll call this.props.onChange if the\n  // selectedItem is changed.\n  internalSetState = (stateToSet, cb) => {\n    let isItemSelected, onChangeArg\n\n    const onStateChangeArg = {}\n    const isStateToSetFunction = typeof stateToSet === 'function'\n\n    // we want to call `onInputValueChange` before the `setState` call\n    // so someone controlling the `inputValue` state gets notified of\n    // the input change as soon as possible. This avoids issues with\n    // preserving the cursor position.\n    // See https://github.com/downshift-js/downshift/issues/217 for more info.\n    if (!isStateToSetFunction && stateToSet.hasOwnProperty('inputValue')) {\n      this.props.onInputValueChange(stateToSet.inputValue, {\n        ...this.getStateAndHelpers(),\n        ...stateToSet,\n      })\n    }\n    return this.setState(\n      state => {\n        state = this.getState(state)\n        let newStateToSet = isStateToSetFunction\n          ? stateToSet(state)\n          : stateToSet\n\n        // Your own function that could modify the state that will be set.\n        newStateToSet = this.props.stateReducer(state, newStateToSet)\n\n        // checks if an item is selected, regardless of if it's different from\n        // what was selected before\n        // used to determine if onSelect and onChange callbacks should be called\n        isItemSelected = newStateToSet.hasOwnProperty('selectedItem')\n        // this keeps track of the object we want to call with setState\n        const nextState = {}\n        // this is just used to tell whether the state changed\n        const nextFullState = {}\n        // we need to call on change if the outside world is controlling any of our state\n        // and we're trying to update that state. OR if the selection has changed and we're\n        // trying to update the selection\n        if (\n          isItemSelected &&\n          newStateToSet.selectedItem !== state.selectedItem\n        ) {\n          onChangeArg = newStateToSet.selectedItem\n        }\n        newStateToSet.type = newStateToSet.type || stateChangeTypes.unknown\n\n        Object.keys(newStateToSet).forEach(key => {\n          // onStateChangeArg should only have the state that is\n          // actually changing\n          if (state[key] !== newStateToSet[key]) {\n            onStateChangeArg[key] = newStateToSet[key]\n          }\n          // the type is useful for the onStateChangeArg\n          // but we don't actually want to set it in internal state.\n          // this is an undocumented feature for now... Not all internalSetState\n          // calls support it and I'm not certain we want them to yet.\n          // But it enables users controlling the isOpen state to know when\n          // the isOpen state changes due to mouseup events which is quite handy.\n          if (key === 'type') {\n            return\n          }\n          nextFullState[key] = newStateToSet[key]\n          // if it's coming from props, then we don't care to set it internally\n          if (!this.isControlledProp(key)) {\n            nextState[key] = newStateToSet[key]\n          }\n        })\n\n        // if stateToSet is a function, then we weren't able to call onInputValueChange\n        // earlier, so we'll call it now that we know what the inputValue state will be.\n        if (\n          isStateToSetFunction &&\n          newStateToSet.hasOwnProperty('inputValue')\n        ) {\n          this.props.onInputValueChange(newStateToSet.inputValue, {\n            ...this.getStateAndHelpers(),\n            ...newStateToSet,\n          })\n        }\n\n        return nextState\n      },\n      () => {\n        // call the provided callback if it's a function\n        cbToCb(cb)()\n\n        // only call the onStateChange and onChange callbacks if\n        // we have relevant information to pass them.\n        const hasMoreStateThanType = Object.keys(onStateChangeArg).length > 1\n        if (hasMoreStateThanType) {\n          this.props.onStateChange(onStateChangeArg, this.getStateAndHelpers())\n        }\n\n        if (isItemSelected) {\n          this.props.onSelect(\n            stateToSet.selectedItem,\n            this.getStateAndHelpers(),\n          )\n        }\n\n        if (onChangeArg !== undefined) {\n          this.props.onChange(onChangeArg, this.getStateAndHelpers())\n        }\n        // this is currently undocumented and therefore subject to change\n        // We'll try to not break it, but just be warned.\n        this.props.onUserAction(onStateChangeArg, this.getStateAndHelpers())\n      },\n    )\n  }\n\n  getStateAndHelpers() {\n    const {highlightedIndex, inputValue, selectedItem, isOpen} = this.getState()\n    const {itemToString} = this.props\n    const {id} = this\n    const {\n      getRootProps,\n      getToggleButtonProps,\n      getLabelProps,\n      getMenuProps,\n      getInputProps,\n      getItemProps,\n      openMenu,\n      closeMenu,\n      toggleMenu,\n      selectItem,\n      selectItemAtIndex,\n      selectHighlightedItem,\n      setHighlightedIndex,\n      clearSelection,\n      clearItems,\n      reset,\n      setItemCount,\n      unsetItemCount,\n      internalSetState: setState,\n    } = this\n    return {\n      // prop getters\n      getRootProps,\n      getToggleButtonProps,\n      getLabelProps,\n      getMenuProps,\n      getInputProps,\n      getItemProps,\n\n      // actions\n      reset,\n      openMenu,\n      closeMenu,\n      toggleMenu,\n      selectItem,\n      selectItemAtIndex,\n      selectHighlightedItem,\n      setHighlightedIndex,\n      clearSelection,\n      clearItems,\n      setItemCount,\n      unsetItemCount,\n      setState,\n\n      // props\n      itemToString,\n\n      // derived\n      id,\n\n      // state\n      highlightedIndex,\n      inputValue,\n      isOpen,\n      selectedItem,\n    }\n  }\n\n  //////////////////////////// ROOT\n\n  rootRef = node => (this._rootNode = node)\n\n  getRootProps = (\n    {refKey = 'ref', ref, ...rest} = {},\n    {suppressRefError = false} = {},\n  ) => {\n    // this is used in the render to know whether the user has called getRootProps.\n    // It uses that to know whether to apply the props automatically\n    this.getRootProps.called = true\n    this.getRootProps.refKey = refKey\n    this.getRootProps.suppressRefError = suppressRefError\n    const {isOpen} = this.getState()\n    return {\n      [refKey]: callAll(ref, this.rootRef),\n      role: 'combobox',\n      'aria-expanded': isOpen,\n      'aria-haspopup': 'listbox',\n      'aria-owns': isOpen ? this.menuId : null,\n      'aria-labelledby': this.labelId,\n      ...rest,\n    }\n  }\n\n  //\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ ROOT\n\n  keyDownHandlers = {\n    ArrowDown(event) {\n      event.preventDefault()\n\n      if (this.getState().isOpen) {\n        const amount = event.shiftKey ? 5 : 1\n        this.moveHighlightedIndex(amount, {\n          type: stateChangeTypes.keyDownArrowDown,\n        })\n      } else {\n        this.internalSetState(\n          {\n            isOpen: true,\n            type: stateChangeTypes.keyDownArrowDown,\n          },\n          () => {\n            const itemCount = this.getItemCount()\n            if (itemCount > 0) {\n              this.setHighlightedIndex(\n                getNextWrappingIndex(\n                  1,\n                  this.getState().highlightedIndex,\n                  itemCount,\n                ),\n                {type: stateChangeTypes.keyDownArrowDown},\n              )\n            }\n          },\n        )\n      }\n    },\n\n    ArrowUp(event) {\n      event.preventDefault()\n\n      if (this.getState().isOpen) {\n        const amount = event.shiftKey ? -5 : -1\n        this.moveHighlightedIndex(amount, {\n          type: stateChangeTypes.keyDownArrowUp,\n        })\n      } else {\n        this.internalSetState(\n          {\n            isOpen: true,\n            type: stateChangeTypes.keyDownArrowUp,\n          },\n          () => {\n            const itemCount = this.getItemCount()\n            if (itemCount > 0) {\n              this.setHighlightedIndex(\n                getNextWrappingIndex(\n                  -1,\n                  this.getState().highlightedIndex,\n                  itemCount,\n                ),\n                {type: stateChangeTypes.keyDownArrowDown},\n              )\n            }\n          },\n        )\n      }\n    },\n\n    Enter(event) {\n      const {isOpen, highlightedIndex} = this.getState()\n      if (isOpen && highlightedIndex != null) {\n        event.preventDefault()\n        const item = this.items[highlightedIndex]\n        const itemNode = this.getItemNodeFromIndex(highlightedIndex)\n        if (item == null || (itemNode && itemNode.hasAttribute('disabled'))) {\n          return\n        }\n        this.selectHighlightedItem({\n          type: stateChangeTypes.keyDownEnter,\n        })\n      }\n    },\n\n    Escape(event) {\n      event.preventDefault()\n      this.reset({\n        type: stateChangeTypes.keyDownEscape,\n        selectedItem: null,\n        inputValue: '',\n      })\n    },\n  }\n\n  //////////////////////////// BUTTON\n\n  buttonKeyDownHandlers = {\n    ...this.keyDownHandlers,\n\n    ' '(event) {\n      event.preventDefault()\n      this.toggleMenu({type: stateChangeTypes.keyDownSpaceButton})\n    },\n  }\n\n  inputKeyDownHandlers = {\n    ...this.keyDownHandlers,\n    Home(event) {\n      this.highlightFirstOrLastIndex(event, true, {\n        type: stateChangeTypes.keyDownHome,\n      })\n    },\n\n    End(event) {\n      this.highlightFirstOrLastIndex(event, false, {\n        type: stateChangeTypes.keyDownEnd,\n      })\n    },\n  }\n\n  getToggleButtonProps = ({\n    onClick,\n    onPress,\n    onKeyDown,\n    onKeyUp,\n    onBlur,\n    ...rest\n  } = {}) => {\n    const {isOpen} = this.getState()\n    const enabledEventHandlers = isReactNative\n      ? /* istanbul ignore next (react-native) */\n        {\n          onPress: callAllEventHandlers(onPress, this.buttonHandleClick),\n        }\n      : {\n          onClick: callAllEventHandlers(onClick, this.buttonHandleClick),\n          onKeyDown: callAllEventHandlers(onKeyDown, this.buttonHandleKeyDown),\n          onKeyUp: callAllEventHandlers(onKeyUp, this.buttonHandleKeyUp),\n          onBlur: callAllEventHandlers(onBlur, this.buttonHandleBlur),\n        }\n    const eventHandlers = rest.disabled ? {} : enabledEventHandlers\n    return {\n      type: 'button',\n      role: 'button',\n      'aria-label': isOpen ? 'close menu' : 'open menu',\n      'aria-haspopup': true,\n      'data-toggle': true,\n      ...eventHandlers,\n      ...rest,\n    }\n  }\n\n  buttonHandleKeyUp = event => {\n    // Prevent click event from emitting in Firefox\n    event.preventDefault()\n  }\n\n  buttonHandleKeyDown = event => {\n    const key = normalizeArrowKey(event)\n    if (this.buttonKeyDownHandlers[key]) {\n      this.buttonKeyDownHandlers[key].call(this, event)\n    }\n  }\n\n  buttonHandleClick = event => {\n    event.preventDefault()\n    // handle odd case for Safari and Firefox which\n    // don't give the button the focus properly.\n    /* istanbul ignore if (can't reasonably test this) */\n    if (\n      !isReactNative &&\n      this.props.environment.document.activeElement ===\n        this.props.environment.document.body\n    ) {\n      event.target.focus()\n    }\n    // to simplify testing components that use downshift, we'll not wrap this in a setTimeout\n    // if the NODE_ENV is test. With the proper build system, this should be dead code eliminated\n    // when building for production and should therefore have no impact on production code.\n    if (process.env.NODE_ENV === 'test') {\n      this.toggleMenu({type: stateChangeTypes.clickButton})\n    } else {\n      // Ensure that toggle of menu occurs after the potential blur event in iOS\n      this.internalSetTimeout(() =>\n        this.toggleMenu({type: stateChangeTypes.clickButton}),\n      )\n    }\n  }\n\n  buttonHandleBlur = event => {\n    const blurTarget = event.target // Save blur target for comparison with activeElement later\n    // Need setTimeout, so that when the user presses Tab, the activeElement is the next focused element, not body element\n    this.internalSetTimeout(() => {\n      if (\n        !this.isMouseDown &&\n        (this.props.environment.document.activeElement == null ||\n          this.props.environment.document.activeElement.id !== this.inputId) &&\n        this.props.environment.document.activeElement !== blurTarget // Do nothing if we refocus the same element again (to solve issue in Safari on iOS)\n      ) {\n        this.reset({type: stateChangeTypes.blurButton})\n      }\n    })\n  }\n\n  //\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ BUTTON\n\n  /////////////////////////////// LABEL\n\n  getLabelProps = props => {\n    return {htmlFor: this.inputId, id: this.labelId, ...props}\n  }\n\n  //\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ LABEL\n\n  /////////////////////////////// INPUT\n\n  getInputProps = ({\n    onKeyDown,\n    onBlur,\n    onChange,\n    onInput,\n    onChangeText,\n    ...rest\n  } = {}) => {\n    let onChangeKey\n    let eventHandlers = {}\n\n    /* istanbul ignore next (preact) */\n    if (isPreact) {\n      onChangeKey = 'onInput'\n    } else {\n      onChangeKey = 'onChange'\n    }\n    const {inputValue, isOpen, highlightedIndex} = this.getState()\n\n    if (!rest.disabled) {\n      eventHandlers = {\n        [onChangeKey]: callAllEventHandlers(\n          onChange,\n          onInput,\n          this.inputHandleChange,\n        ),\n        onKeyDown: callAllEventHandlers(onKeyDown, this.inputHandleKeyDown),\n        onBlur: callAllEventHandlers(onBlur, this.inputHandleBlur),\n      }\n    }\n\n    /* istanbul ignore if (react-native) */\n    if (isReactNative) {\n      eventHandlers = {\n        onChange: callAllEventHandlers(\n          onChange,\n          onInput,\n          this.inputHandleChange,\n        ),\n        onChangeText: callAllEventHandlers(\n          onChangeText,\n          onInput,\n          text => this.inputHandleChange({nativeEvent: {text}}),\n          this.inputHandleTextChange,\n        ),\n        onBlur: callAllEventHandlers(onBlur, this.inputHandleBlur),\n      }\n    }\n\n    return {\n      'aria-autocomplete': 'list',\n      'aria-activedescendant':\n        isOpen && typeof highlightedIndex === 'number' && highlightedIndex >= 0\n          ? this.getItemId(highlightedIndex)\n          : null,\n      'aria-controls': isOpen ? this.menuId : null,\n      'aria-labelledby': this.labelId,\n      // https://developer.mozilla.org/en-US/docs/Web/Security/Securing_your_site/Turning_off_form_autocompletion\n      // revert back since autocomplete=\"nope\" is ignored on latest Chrome and Opera\n      autoComplete: 'off',\n      value: inputValue,\n      id: this.inputId,\n      ...eventHandlers,\n      ...rest,\n    }\n  }\n\n  inputHandleKeyDown = event => {\n    const key = normalizeArrowKey(event)\n    if (key && this.inputKeyDownHandlers[key]) {\n      this.inputKeyDownHandlers[key].call(this, event)\n    }\n  }\n\n  inputHandleChange = event => {\n    this.internalSetState({\n      type: stateChangeTypes.changeInput,\n      isOpen: true,\n      inputValue: isReactNative\n        ? /* istanbul ignore next (react-native) */ event.nativeEvent.text\n        : event.target.value,\n      highlightedIndex: this.props.defaultHighlightedIndex,\n    })\n  }\n\n  inputHandleBlur = () => {\n    // Need setTimeout, so that when the user presses Tab, the activeElement is the next focused element, not the body element\n    this.internalSetTimeout(() => {\n      const downshiftButtonIsActive =\n        this.props.environment.document &&\n        !!this.props.environment.document.activeElement &&\n        !!this.props.environment.document.activeElement.dataset &&\n        this.props.environment.document.activeElement.dataset.toggle &&\n        (this._rootNode &&\n          this._rootNode.contains(\n            this.props.environment.document.activeElement,\n          ))\n      if (!this.isMouseDown && !downshiftButtonIsActive) {\n        this.reset({type: stateChangeTypes.blurInput})\n      }\n    })\n  }\n\n  //\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ INPUT\n\n  /////////////////////////////// MENU\n\n  menuRef = node => {\n    this._menuNode = node\n  }\n\n  getMenuProps = (\n    {refKey = 'ref', ref, ...props} = {},\n    {suppressRefError = false} = {},\n  ) => {\n    this.getMenuProps.called = true\n    this.getMenuProps.refKey = refKey\n    this.getMenuProps.suppressRefError = suppressRefError\n\n    return {\n      [refKey]: callAll(ref, this.menuRef),\n      role: 'listbox',\n      'aria-labelledby': props && props['aria-label'] ? null : this.labelId,\n      id: this.menuId,\n      ...props,\n    }\n  }\n  //\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ MENU\n\n  /////////////////////////////// ITEM\n  getItemProps = ({\n    onMouseMove,\n    onMouseDown,\n    onClick,\n    onPress,\n    index,\n    item = process.env.NODE_ENV === 'production'\n      ? /* istanbul ignore next */ undefined\n      : requiredProp('getItemProps', 'item'),\n    ...rest\n  } = {}) => {\n    if (index === undefined) {\n      this.items.push(item)\n      index = this.items.indexOf(item)\n    } else {\n      this.items[index] = item\n    }\n\n    const onSelectKey = isReactNative\n      ? /* istanbul ignore next (react-native) */ 'onPress'\n      : 'onClick'\n    const customClickHandler = isReactNative\n      ? /* istanbul ignore next (react-native) */ onPress\n      : onClick\n\n    const enabledEventHandlers = {\n      // onMouseMove is used over onMouseEnter here. onMouseMove\n      // is only triggered on actual mouse movement while onMouseEnter\n      // can fire on DOM changes, interrupting keyboard navigation\n      onMouseMove: callAllEventHandlers(onMouseMove, () => {\n        if (index === this.getState().highlightedIndex) {\n          return\n        }\n        this.setHighlightedIndex(index, {\n          type: stateChangeTypes.itemMouseEnter,\n        })\n\n        // We never want to manually scroll when changing state based\n        // on `onMouseMove` because we will be moving the element out\n        // from under the user which is currently scrolling/moving the\n        // cursor\n        this.avoidScrolling = true\n        this.internalSetTimeout(() => (this.avoidScrolling = false), 250)\n      }),\n      onMouseDown: callAllEventHandlers(onMouseDown, event => {\n        // This prevents the activeElement from being changed\n        // to the item so it can remain with the current activeElement\n        // which is a more common use case.\n        event.preventDefault()\n      }),\n      [onSelectKey]: callAllEventHandlers(customClickHandler, () => {\n        this.selectItemAtIndex(index, {\n          type: stateChangeTypes.clickItem,\n        })\n      }),\n    }\n\n    // Passing down the onMouseDown handler to prevent redirect\n    // of the activeElement if clicking on disabled items\n    const eventHandlers = rest.disabled\n      ? {onMouseDown: enabledEventHandlers.onMouseDown}\n      : enabledEventHandlers\n\n    return {\n      id: this.getItemId(index),\n      role: 'option',\n      'aria-selected': this.getState().highlightedIndex === index,\n      ...eventHandlers,\n      ...rest,\n    }\n  }\n  //\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ ITEM\n\n  clearItems = () => {\n    this.items = []\n  }\n\n  reset = (otherStateToSet = {}, cb) => {\n    otherStateToSet = pickState(otherStateToSet)\n    this.internalSetState(\n      ({selectedItem}) => ({\n        isOpen: this.props.defaultIsOpen,\n        highlightedIndex: this.props.defaultHighlightedIndex,\n        inputValue: this.props.itemToString(selectedItem),\n        ...otherStateToSet,\n      }),\n      cb,\n    )\n  }\n\n  toggleMenu = (otherStateToSet = {}, cb) => {\n    otherStateToSet = pickState(otherStateToSet)\n    this.internalSetState(\n      ({isOpen}) => {\n        return {\n          isOpen: !isOpen,\n          ...(isOpen && {\n            highlightedIndex: this.props.defaultHighlightedIndex,\n          }),\n          ...otherStateToSet,\n        }\n      },\n      () => {\n        const {isOpen, highlightedIndex} = this.getState()\n        if (isOpen) {\n          if (this.getItemCount() > 0 && typeof highlightedIndex === 'number') {\n            this.setHighlightedIndex(highlightedIndex, otherStateToSet)\n          }\n        }\n        cbToCb(cb)()\n      },\n    )\n  }\n\n  openMenu = cb => {\n    this.internalSetState({isOpen: true}, cb)\n  }\n\n  closeMenu = cb => {\n    this.internalSetState({isOpen: false}, cb)\n  }\n\n  updateStatus = debounce(() => {\n    const state = this.getState()\n    const item = this.items[state.highlightedIndex]\n    const resultCount = this.getItemCount()\n    const status = this.props.getA11yStatusMessage({\n      itemToString: this.props.itemToString,\n      previousResultCount: this.previousResultCount,\n      resultCount,\n      highlightedItem: item,\n      ...state,\n    })\n    this.previousResultCount = resultCount\n\n    setA11yStatus(status, this.props.environment.document)\n  }, 200)\n\n  componentDidMount() {\n    /* istanbul ignore if (react-native) */\n    if (\n      process.env.NODE_ENV !== 'production' &&\n      !isReactNative &&\n      this.getMenuProps.called &&\n      !this.getMenuProps.suppressRefError\n    ) {\n      validateGetMenuPropsCalledCorrectly(this._menuNode, this.getMenuProps)\n    }\n\n    /* istanbul ignore if (react-native) */\n    if (isReactNative) {\n      this.cleanup = () => {\n        this.internalClearTimeouts()\n      }\n    } else {\n      const targetWithinDownshift = (target, checkActiveElement = true) => {\n        const {document} = this.props.environment\n        return [this._rootNode, this._menuNode].some(\n          contextNode =>\n            contextNode &&\n            (isOrContainsNode(contextNode, target) ||\n              (checkActiveElement &&\n                isOrContainsNode(contextNode, document.activeElement))),\n        )\n      }\n      // this.isMouseDown helps us track whether the mouse is currently held down.\n      // This is useful when the user clicks on an item in the list, but holds the mouse\n      // down long enough for the list to disappear (because the blur event fires on the input)\n      // this.isMouseDown is used in the blur handler on the input to determine whether the blur event should\n      // trigger hiding the menu.\n      const onMouseDown = () => {\n        this.isMouseDown = true\n      }\n      const onMouseUp = event => {\n        this.isMouseDown = false\n        // if the target element or the activeElement is within a downshift node\n        // then we don't want to reset downshift\n        const contextWithinDownshift = targetWithinDownshift(event.target)\n        if (!contextWithinDownshift && this.getState().isOpen) {\n          this.reset({type: stateChangeTypes.mouseUp}, () =>\n            this.props.onOuterClick(this.getStateAndHelpers()),\n          )\n        }\n      }\n      // Touching an element in iOS gives focus and hover states, but touching out of\n      // the element will remove hover, and persist the focus state, resulting in the\n      // blur event not being triggered.\n      // this.isTouchMove helps us track whether the user is tapping or swiping on a touch screen.\n      // If the user taps outside of Downshift, the component should be reset,\n      // but not if the user is swiping\n      const onTouchStart = () => {\n        this.isTouchMove = false\n      }\n\n      const onTouchMove = () => {\n        this.isTouchMove = true\n      }\n\n      const onTouchEnd = event => {\n        const contextWithinDownshift = targetWithinDownshift(\n          event.target,\n          false,\n        )\n        if (\n          !this.isTouchMove &&\n          !contextWithinDownshift &&\n          this.getState().isOpen\n        ) {\n          this.reset({type: stateChangeTypes.touchEnd}, () =>\n            this.props.onOuterClick(this.getStateAndHelpers()),\n          )\n        }\n      }\n      const {environment} = this.props\n\n      environment.addEventListener('mousedown', onMouseDown)\n      environment.addEventListener('mouseup', onMouseUp)\n      environment.addEventListener('touchstart', onTouchStart)\n      environment.addEventListener('touchmove', onTouchMove)\n      environment.addEventListener('touchend', onTouchEnd)\n\n      this.cleanup = () => {\n        this.internalClearTimeouts()\n        this.updateStatus.cancel()\n        environment.removeEventListener('mousedown', onMouseDown)\n        environment.removeEventListener('mouseup', onMouseUp)\n        environment.removeEventListener('touchstart', onTouchStart)\n        environment.removeEventListener('touchmove', onTouchMove)\n        environment.removeEventListener('touchend', onTouchEnd)\n      }\n    }\n  }\n\n  shouldScroll(prevState, prevProps) {\n    const {highlightedIndex: currentHighlightedIndex} =\n      this.props.highlightedIndex === undefined ? this.getState() : this.props\n    const {highlightedIndex: prevHighlightedIndex} =\n      prevProps.highlightedIndex === undefined ? prevState : prevProps\n    const scrollWhenOpen =\n      currentHighlightedIndex && this.getState().isOpen && !prevState.isOpen\n    const scrollWhenNavigating =\n      currentHighlightedIndex !== prevHighlightedIndex\n\n    return scrollWhenOpen || scrollWhenNavigating\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (process.env.NODE_ENV !== 'production') {\n      validateControlledUnchanged(prevProps, this.props)\n      /* istanbul ignore if (react-native) */\n      if (\n        !isReactNative &&\n        this.getMenuProps.called &&\n        !this.getMenuProps.suppressRefError\n      ) {\n        validateGetMenuPropsCalledCorrectly(this._menuNode, this.getMenuProps)\n      }\n    }\n\n    if (\n      this.isControlledProp('selectedItem') &&\n      this.props.selectedItemChanged(\n        prevProps.selectedItem,\n        this.props.selectedItem,\n      )\n    ) {\n      this.internalSetState({\n        type: stateChangeTypes.controlledPropUpdatedSelectedItem,\n        inputValue: this.props.itemToString(this.props.selectedItem),\n      })\n    }\n\n    if (!this.avoidScrolling && this.shouldScroll(prevState, prevProps)) {\n      this.scrollHighlightedItemIntoView()\n    }\n\n    /* istanbul ignore else (react-native) */\n    if (!isReactNative) {\n      this.updateStatus()\n    }\n  }\n\n  componentWillUnmount() {\n    this.cleanup() // avoids memory leak\n  }\n\n  render() {\n    const children = unwrapArray(this.props.children, noop)\n    // because the items are rerendered every time we call the children\n    // we clear this out each render and it will be populated again as\n    // getItemProps is called.\n    this.clearItems()\n    // we reset this so we know whether the user calls getRootProps during\n    // this render. If they do then we don't need to do anything,\n    // if they don't then we need to clone the element they return and\n    // apply the props for them.\n    this.getRootProps.called = false\n    this.getRootProps.refKey = undefined\n    this.getRootProps.suppressRefError = undefined\n    // we do something similar for getMenuProps\n    this.getMenuProps.called = false\n    this.getMenuProps.refKey = undefined\n    this.getMenuProps.suppressRefError = undefined\n    // we do something similar for getLabelProps\n    this.getLabelProps.called = false\n    // and something similar for getInputProps\n    this.getInputProps.called = false\n    const element = unwrapArray(children(this.getStateAndHelpers()))\n    if (!element) {\n      return null\n    }\n\n    if (this.getRootProps.called || this.props.suppressRefError) {\n      if (\n        process.env.NODE_ENV !== 'production' &&\n        !this.getRootProps.suppressRefError &&\n        !this.props.suppressRefError\n      ) {\n        validateGetRootPropsCalledCorrectly(element, this.getRootProps)\n      }\n      return element\n    } else if (isDOMElement(element)) {\n      // they didn't apply the root props, but we can clone\n      // this and apply the props ourselves\n      return React.cloneElement(\n        element,\n        this.getRootProps(getElementProps(element)),\n      )\n    }\n\n    /* istanbul ignore else */\n    if (process.env.NODE_ENV !== 'production') {\n      // they didn't apply the root props, but they need to\n      // otherwise we can't query around the autocomplete\n\n      throw new Error(\n        'downshift: If you return a non-DOM element, you must use apply the getRootProps function',\n      )\n    }\n\n    /* istanbul ignore next */\n    return undefined\n  }\n}\n\nexport default Downshift\n\nfunction validateGetMenuPropsCalledCorrectly(node, {refKey}) {\n  if (!node) {\n    // eslint-disable-next-line no-console\n    console.error(\n      `downshift: The ref prop \"${refKey}\" from getMenuProps was not applied correctly on your menu element.`,\n    )\n  }\n}\n\nfunction validateGetRootPropsCalledCorrectly(element, {refKey}) {\n  const refKeySpecified = refKey !== 'ref'\n  const isComposite = !isDOMElement(element)\n  if (isComposite && !refKeySpecified && !isForwardRef(element)) {\n    // eslint-disable-next-line no-console\n    console.error(\n      'downshift: You returned a non-DOM element. You must specify a refKey in getRootProps',\n    )\n  } else if (!isComposite && refKeySpecified) {\n    // eslint-disable-next-line no-console\n    console.error(\n      `downshift: You returned a DOM element. You should not specify a refKey in getRootProps. You specified \"${refKey}\"`,\n    )\n  }\n  if (!isForwardRef(element) && !getElementProps(element)[refKey]) {\n    // eslint-disable-next-line no-console\n    console.error(\n      `downshift: You must apply the ref prop \"${refKey}\" from getRootProps onto your root element.`,\n    )\n  }\n}\n\nfunction validateControlledUnchanged(prevProps, nextProps) {\n  const warningDescription = `This prop should not switch from controlled to uncontrolled (or vice versa). Decide between using a controlled or uncontrolled Downshift element for the lifetime of the component. More info: https://github.com/downshift-js/downshift#control-props`\n  ;['selectedItem', 'isOpen', 'inputValue', 'highlightedIndex'].forEach(\n    propKey => {\n      if (\n        prevProps[propKey] !== undefined &&\n        nextProps[propKey] === undefined\n      ) {\n        // eslint-disable-next-line no-console\n        console.error(\n          `downshift: A component has changed the controlled prop \"${propKey}\" to be uncontrolled. ${warningDescription}`,\n        )\n      } else if (\n        prevProps[propKey] === undefined &&\n        nextProps[propKey] !== undefined\n      ) {\n        // eslint-disable-next-line no-console\n        console.error(\n          `downshift: A component has changed the uncontrolled prop \"${propKey}\" to be controlled. ${warningDescription}`,\n        )\n      }\n    },\n  )\n}\n","export default function _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n  subClass.__proto__ = superClass;\n}","import { useState, useEffect } from \"react\";\n\n// Could use UUID but if we hit 9,007,199,254,740,991 unique components over\n// the lifetime of the app before it gets reloaded, I mean ... come on.\n// I don't even know what xillion that is.\n// /me googles\n// Oh duh, quadrillion. Nine quadrillion components. I think we're okay.\nvar id = 0;\nvar genId = function genId() {\n  return ++id;\n};\n\nexport var useId = function useId() {\n  var _useState = useState(null),\n      id = _useState[0],\n      setId = _useState[1];\n\n  useEffect(function () {\n    return setId(genId());\n  }, []);\n  return id;\n};","import PropTypes from 'prop-types'\nimport React from 'react'\n\nfunction getElementIds(\n  generateDefaultId,\n  {id, labelId, menuId, getItemId, toggleButtonId} = {},\n) {\n  const uniqueId = id === undefined ? `downshift-${generateDefaultId()}` : id\n\n  return {\n    labelId: labelId || `${uniqueId}-label`,\n    menuId: menuId || `${uniqueId}-menu`,\n    getItemId: getItemId || (index => `${uniqueId}-item-${index}`),\n    toggleButtonId: toggleButtonId || `${uniqueId}-toggle-button`,\n  }\n}\n\nfunction getNextWrappingIndex(moveAmount, baseIndex, itemsLength, circular) {\n  if (baseIndex === -1) {\n    return moveAmount > 0 ? 0 : itemsLength - 1\n  }\n  const nextIndex = baseIndex + moveAmount\n\n  if (nextIndex < 0) {\n    return circular ? itemsLength - 1 : 0\n  }\n  if (nextIndex >= itemsLength) {\n    return circular ? 0 : itemsLength - 1\n  }\n\n  return nextIndex\n}\n\nfunction getItemIndexByCharacterKey(\n  keysSoFar,\n  highlightedIndex,\n  items,\n  itemToStringParam,\n) {\n  let newHighlightedIndex = -1\n  const itemStrings = items.map(item => itemToStringParam(item).toLowerCase())\n  const startPosition = highlightedIndex + 1\n\n  newHighlightedIndex = itemStrings\n    .slice(startPosition)\n    .findIndex(itemString => itemString.startsWith(keysSoFar))\n\n  if (newHighlightedIndex > -1) {\n    return newHighlightedIndex + startPosition\n  } else {\n    return itemStrings\n      .slice(0, startPosition)\n      .findIndex(itemString => itemString.startsWith(keysSoFar))\n  }\n}\n\nfunction getState(state, props) {\n  return Object.keys(state).reduce((prevState, key) => {\n    // eslint-disable-next-line no-param-reassign\n    prevState[key] = key in props ? props[key] : state[key]\n    return prevState\n  }, {})\n}\n\nfunction getItemIndex(index, item, items) {\n  if (index !== undefined) {\n    return index\n  }\n  if (items.length === 0) {\n    return -1\n  }\n  return items.indexOf(item)\n}\n\nfunction itemToString(item) {\n  return item ? String(item) : ''\n}\n\nfunction getPropTypesValidator(caller, propTypes) {\n  // istanbul ignore next\n  return function validate(options = {}) {\n    Object.entries(propTypes).forEach(([key]) => {\n      PropTypes.checkPropTypes(propTypes, options, key, caller.name)\n    })\n  }\n}\n\nfunction isAcceptedCharacterKey(key) {\n  return /^\\S{1}$/.test(key)\n}\n\nfunction capitalizeString(string) {\n  return `${string.slice(0, 1).toUpperCase()}${string.slice(1)}`\n}\n\nfunction invokeOnChangeHandler(propKey, props, state, changes) {\n  const handler = `on${capitalizeString(propKey)}Change`\n  if (\n    props[handler] &&\n    changes[propKey] !== undefined &&\n    changes[propKey] !== state[propKey]\n  ) {\n    props[handler](changes)\n  }\n}\n\nfunction callOnChangeProps(props, state, changes) {\n  Object.keys(state).forEach(stateKey => {\n    invokeOnChangeHandler(stateKey, props, state, changes)\n  })\n\n  if (props.onStateChange && changes !== undefined) {\n    props.onStateChange(changes)\n  }\n}\n\nfunction useEnhancedReducer(reducer, initialState, props) {\n  const enhancedReducer = React.useCallback(\n    (state, action) => {\n      state = getState(state, action.props)\n\n      const {stateReducer} = action.props\n      const changes = reducer(state, action)\n      const newState = stateReducer(state, {...action, changes})\n\n      callOnChangeProps(action.props, state, newState)\n\n      return newState\n    },\n    [reducer],\n  )\n\n  const [state, dispatch] = React.useReducer(enhancedReducer, initialState)\n\n  return [getState(state, props), dispatch]\n}\n\nexport {\n  getElementIds,\n  getNextWrappingIndex,\n  getItemIndexByCharacterKey,\n  getState,\n  getItemIndex,\n  getPropTypesValidator,\n  itemToString,\n  isAcceptedCharacterKey,\n  useEnhancedReducer,\n  capitalizeString,\n}\n","import PropTypes from 'prop-types'\nimport {getNextWrappingIndex, capitalizeString} from '../utils'\n\nconst defaultStateValues = {\n  highlightedIndex: -1,\n  isOpen: false,\n  selectedItem: null,\n}\n\nfunction getA11yStatusMessage({isOpen, items}) {\n  if (!items) {\n    return ''\n  }\n  const resultCount = items.length\n  if (isOpen) {\n    if (resultCount === 0) {\n      return 'No results are available'\n    }\n    return `${resultCount} result${\n      resultCount === 1 ? ' is' : 's are'\n    } available, use up and down arrow keys to navigate. Press Enter key to select.`\n  }\n  return ''\n}\n\nfunction getA11ySelectionMessage({selectedItem, itemToString}) {\n  return `${itemToString(selectedItem)} has been selected.`\n}\n\nfunction getHighlightedIndexOnOpen(props, state, offset) {\n  const {items, initialHighlightedIndex, defaultHighlightedIndex} = props\n  const {selectedItem, highlightedIndex} = state\n\n  // initialHighlightedIndex will give value to highlightedIndex on initial state only.\n  if (initialHighlightedIndex !== undefined && highlightedIndex > -1) {\n    return initialHighlightedIndex\n  }\n  if (defaultHighlightedIndex !== undefined) {\n    return defaultHighlightedIndex\n  }\n  if (selectedItem) {\n    if (offset === 0) {\n      return items.indexOf(selectedItem)\n    }\n    return getNextWrappingIndex(\n      offset,\n      items.indexOf(selectedItem),\n      items.length,\n      false,\n    )\n  }\n  if (offset === 0) {\n    return -1\n  }\n  return offset < 0 ? items.length - 1 : 0\n}\n\nfunction getDefaultValue(props, propKey) {\n  const defaultPropKey = `default${capitalizeString(propKey)}`\n  if (defaultPropKey in props) {\n    return props[defaultPropKey]\n  }\n  return defaultStateValues[propKey]\n}\n\nfunction getInitialValue(props, propKey) {\n  if (propKey in props) {\n    return props[propKey]\n  }\n  const initialPropKey = `initial${capitalizeString(propKey)}`\n  if (initialPropKey in props) {\n    return props[initialPropKey]\n  }\n  return getDefaultValue(props, propKey)\n}\n\nfunction getInitialState(props) {\n  const selectedItem = getInitialValue(props, 'selectedItem')\n  const highlightedIndex = getInitialValue(props, 'highlightedIndex')\n  const isOpen = getInitialValue(props, 'isOpen')\n\n  return {\n    highlightedIndex:\n      highlightedIndex < 0 && selectedItem\n        ? props.items.indexOf(selectedItem)\n        : highlightedIndex,\n    isOpen,\n    selectedItem,\n    keysSoFar: '',\n  }\n}\n\nconst propTypes = {\n  items: PropTypes.array.isRequired,\n  itemToString: PropTypes.func,\n  getA11yStatusMessage: PropTypes.func,\n  getA11ySelectionMessage: PropTypes.func,\n  circularNavigation: PropTypes.bool,\n  highlightedIndex: PropTypes.number,\n  defaultHighlightedIndex: PropTypes.number,\n  initialHighlightedIndex: PropTypes.number,\n  isOpen: PropTypes.bool,\n  defaultIsOpen: PropTypes.bool,\n  initialIsOpen: PropTypes.bool,\n  selectedItem: PropTypes.any,\n  initialSelectedItem: PropTypes.any,\n  defaultSelectedItem: PropTypes.any,\n  id: PropTypes.string,\n  labelId: PropTypes.string,\n  menuId: PropTypes.string,\n  getItemId: PropTypes.func,\n  toggleButtonId: PropTypes.string,\n  stateReducer: PropTypes.func,\n  onSelectedItemChange: PropTypes.func,\n  onHighlightedIndexChange: PropTypes.func,\n  onStateChange: PropTypes.func,\n  onIsOpenChange: PropTypes.func,\n  environment: PropTypes.shape({\n    addEventListener: PropTypes.func,\n    removeEventListener: PropTypes.func,\n    document: PropTypes.shape({\n      getElementById: PropTypes.func,\n      activeElement: PropTypes.any,\n      body: PropTypes.any,\n    }),\n  }),\n}\n\nexport {\n  getHighlightedIndexOnOpen,\n  getA11yStatusMessage,\n  getA11ySelectionMessage,\n  getInitialState,\n  defaultStateValues,\n  propTypes,\n  getDefaultValue,\n}\n","import productionEnum from '../../productionEnum.macro'\n\nexport const MenuKeyDownArrowDown = productionEnum(\n  '__menu_keydown_arrow_down__',\n)\nexport const MenuKeyDownArrowUp = productionEnum('__menu_keydown_arrow_up__')\nexport const MenuKeyDownEscape = productionEnum('__menu_keydown_escape__')\nexport const MenuKeyDownHome = productionEnum('__menu_keydown_home__')\nexport const MenuKeyDownEnd = productionEnum('__menu_keydown_end__')\nexport const MenuKeyDownEnter = productionEnum('__menu_keydown_enter__')\nexport const MenuKeyDownCharacter = productionEnum('__menu_keydown_character__')\nexport const MenuBlur = productionEnum('__menu_blur__')\nexport const ItemMouseMove = productionEnum('__item_mouse_move__')\nexport const ItemClick = productionEnum('__item_click__')\nexport const ToggleButtonKeyDownCharacter = productionEnum(\n  '__togglebutton_keydown_character__',\n)\nexport const ToggleButtonKeyDownArrowDown = productionEnum(\n  '__togglebutton_keydown_arrow_down__',\n)\nexport const ToggleButtonKeyDownArrowUp = productionEnum(\n  '__togglebutton_keydown_arrow_up__',\n)\nexport const ToggleButtonClick = productionEnum('__togglebutton_click__')\nexport const FunctionToggleMenu = productionEnum('__function_toggle_menu__')\nexport const FunctionOpenMenu = productionEnum('__function_open_menu__')\nexport const FunctionCloseMenu = productionEnum('__function_close_menu__')\nexport const FunctionSetHighlightedIndex = productionEnum(\n  '__function_set_highlighted_index__',\n)\nexport const FunctionSelectItem = productionEnum('__function_select_item__')\nexport const FunctionClearKeysSoFar = productionEnum(\n  '__function_clear_keys_so_far__',\n)\nexport const FunctionReset = productionEnum('__function_reset__')\n","import {getNextWrappingIndex, getItemIndexByCharacterKey} from '../utils'\nimport {getHighlightedIndexOnOpen, getDefaultValue} from './utils'\nimport * as stateChangeTypes from './stateChangeTypes'\n\n/* eslint-disable complexity */\nexport default function downshiftSelectReducer(state, action) {\n  const {type, props, shiftKey} = action\n  let changes\n\n  switch (type) {\n    case stateChangeTypes.ItemMouseMove:\n      changes = {\n        highlightedIndex: action.index,\n      }\n      break\n    case stateChangeTypes.ItemClick:\n      changes = {\n        isOpen: getDefaultValue(props, 'isOpen'),\n        highlightedIndex: getDefaultValue(props, 'highlightedIndex'),\n        selectedItem: props.items[action.index],\n      }\n      break\n    case stateChangeTypes.MenuBlur:\n      changes = {\n        isOpen: false,\n        highlightedIndex: -1,\n        ...(state.highlightedIndex >= 0 && {\n          selectedItem: props.items[state.highlightedIndex],\n        }),\n      }\n      break\n    case stateChangeTypes.MenuKeyDownArrowDown:\n      changes = {\n        highlightedIndex: getNextWrappingIndex(\n          shiftKey ? 5 : 1,\n          state.highlightedIndex,\n          props.items.length,\n          props.circularNavigation,\n        ),\n      }\n      break\n    case stateChangeTypes.MenuKeyDownArrowUp:\n      changes = {\n        highlightedIndex: getNextWrappingIndex(\n          shiftKey ? -5 : -1,\n          state.highlightedIndex,\n          props.items.length,\n          props.circularNavigation,\n        ),\n      }\n      break\n    case stateChangeTypes.MenuKeyDownHome:\n      changes = {\n        highlightedIndex: 0,\n      }\n      break\n    case stateChangeTypes.MenuKeyDownEnd:\n      changes = {\n        highlightedIndex: props.items.length - 1,\n      }\n      break\n    case stateChangeTypes.MenuKeyDownEscape:\n      changes = {\n        isOpen: false,\n        highlightedIndex: -1,\n      }\n      break\n    case stateChangeTypes.MenuKeyDownEnter:\n      changes = {\n        isOpen: getDefaultValue(props, 'isOpen'),\n        highlightedIndex: getDefaultValue(props, 'highlightedIndex'),\n        ...(state.highlightedIndex >= 0 && {\n          selectedItem: props.items[state.highlightedIndex],\n        }),\n      }\n      break\n    case stateChangeTypes.MenuKeyDownCharacter:\n      {\n        const lowercasedKey = action.key\n        const keysSoFar = `${state.keysSoFar}${lowercasedKey}`\n        const highlightedIndex = getItemIndexByCharacterKey(\n          keysSoFar,\n          state.highlightedIndex,\n          props.items,\n          props.itemToString,\n        )\n        changes = {\n          keysSoFar,\n          ...(highlightedIndex >= 0 && {\n            highlightedIndex,\n          }),\n        }\n      }\n      break\n    case stateChangeTypes.ToggleButtonKeyDownCharacter:\n      {\n        const lowercasedKey = action.key\n        const keysSoFar = `${state.keysSoFar}${lowercasedKey}`\n        const itemIndex = getItemIndexByCharacterKey(\n          keysSoFar,\n          state.selectedItem ? props.items.indexOf(state.selectedItem) : -1,\n          props.items,\n          props.itemToString,\n        )\n        changes = {\n          keysSoFar,\n          ...(itemIndex >= 0 && {\n            selectedItem: props.items[itemIndex],\n          }),\n        }\n      }\n      break\n    case stateChangeTypes.ToggleButtonKeyDownArrowDown: {\n      changes = {\n        isOpen: true,\n        highlightedIndex: getHighlightedIndexOnOpen(props, state, 1),\n      }\n      break\n    }\n    case stateChangeTypes.ToggleButtonKeyDownArrowUp:\n      changes = {\n        isOpen: true,\n        highlightedIndex: getHighlightedIndexOnOpen(props, state, -1),\n      }\n      break\n    case stateChangeTypes.ToggleButtonClick:\n    case stateChangeTypes.FunctionToggleMenu:\n      changes = {\n        isOpen: !state.isOpen,\n        highlightedIndex: state.isOpen\n          ? -1\n          : getHighlightedIndexOnOpen(props, state, 0),\n      }\n      break\n    case stateChangeTypes.FunctionOpenMenu:\n      changes = {\n        isOpen: true,\n        highlightedIndex: getHighlightedIndexOnOpen(props, state, 0),\n      }\n      break\n    case stateChangeTypes.FunctionCloseMenu:\n      changes = {\n        isOpen: false,\n      }\n      break\n    case stateChangeTypes.FunctionSetHighlightedIndex:\n      changes = {\n        highlightedIndex: action.highlightedIndex,\n      }\n      break\n    case stateChangeTypes.FunctionSelectItem:\n      changes = {\n        selectedItem: action.selectedItem,\n      }\n      break\n    case stateChangeTypes.FunctionClearKeysSoFar:\n      changes = {\n        keysSoFar: '',\n      }\n      break\n    case stateChangeTypes.FunctionReset:\n      changes = {\n        highlightedIndex: getDefaultValue(props, 'highlightedIndex'),\n        isOpen: getDefaultValue(props, 'isOpen'),\n        selectedItem: getDefaultValue(props, 'selectedItem'),\n      }\n      break\n    default:\n      throw new Error('Reducer called without proper action type.')\n  }\n\n  return {\n    ...state,\n    ...changes,\n  }\n}\n/* eslint-enable complexity */\n","/* eslint-disable max-statements */\nimport {useRef, useEffect} from 'react'\nimport {useId} from '@reach/auto-id'\nimport {\n  getElementIds,\n  getItemIndex,\n  getPropTypesValidator,\n  itemToString as defaultItemToString,\n  isAcceptedCharacterKey,\n  useEnhancedReducer,\n} from '../utils'\nimport setStatus from '../../set-a11y-status'\nimport {\n  callAllEventHandlers,\n  callAll,\n  debounce,\n  scrollIntoView as defaultScrollIntoView,\n  normalizeArrowKey,\n} from '../../utils'\nimport downshiftSelectReducer from './reducer'\nimport {\n  getA11yStatusMessage as defaultGetA11yStatusMessage,\n  getA11ySelectionMessage as defaultGetA11ySelectionMessage,\n  getInitialState,\n  propTypes,\n} from './utils'\nimport * as stateChangeTypes from './stateChangeTypes'\n\nconst validatePropTypes = getPropTypesValidator(useSelect, propTypes)\nconst defaultProps = {\n  itemToString: defaultItemToString,\n  stateReducer: (s, a) => a.changes,\n  getA11yStatusMessage: defaultGetA11yStatusMessage,\n  getA11ySelectionMessage: defaultGetA11ySelectionMessage,\n  scrollIntoView: defaultScrollIntoView,\n  environment:\n    typeof window === 'undefined' /* istanbul ignore next (ssr) */\n      ? {}\n      : window,\n}\n\nuseSelect.stateChangeTypes = stateChangeTypes\n\nfunction useSelect(userProps = {}) {\n  validatePropTypes(userProps)\n  // Props defaults and destructuring.\n  const props = {\n    ...defaultProps,\n    ...userProps,\n  }\n  const {\n    items,\n    itemToString,\n    getA11yStatusMessage,\n    getA11ySelectionMessage,\n    initialIsOpen,\n    defaultIsOpen,\n    scrollIntoView,\n    environment,\n  } = props\n  // Initial state depending on controlled props.\n  const initialState = getInitialState(props)\n\n  // Reducer init.\n  const [\n    {isOpen, highlightedIndex, selectedItem, keysSoFar},\n    dispatchWithoutProps,\n  ] = useEnhancedReducer(downshiftSelectReducer, initialState, props)\n  const dispatch = action => dispatchWithoutProps({props, ...action})\n\n  // IDs generation.\n  const {labelId, getItemId, menuId, toggleButtonId} = getElementIds(\n    useId,\n    props,\n  )\n\n  /* Refs */\n  const toggleButtonRef = useRef(null)\n  const menuRef = useRef(null)\n  const itemRefs = useRef()\n  itemRefs.current = []\n  const isInitialMount = useRef(true)\n  const shouldScroll = useRef(true)\n  const clearTimeout = useRef(null)\n\n  /* Effects */\n  /* Sets a11y status message on changes in isOpen. */\n  useEffect(() => {\n    if (isInitialMount.current) {\n      return\n    }\n    setStatus(\n      getA11yStatusMessage({\n        isOpen,\n        items,\n        selectedItem,\n        itemToString,\n      }),\n      environment.document,\n    )\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [isOpen])\n  /* Sets a11y status message on changes in selectedItem. */\n  useEffect(() => {\n    if (isInitialMount.current) {\n      return\n    }\n    setStatus(\n      getA11ySelectionMessage({\n        isOpen,\n        items,\n        selectedItem,\n        itemToString,\n      }),\n      environment.document,\n    )\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [selectedItem])\n  /* Sets cleanup for the keysSoFar after 500ms. */\n  useEffect(() => {\n    // init the clean function here as we need access to dispatch.\n    if (isInitialMount.current) {\n      clearTimeout.current = debounce(() => {\n        dispatch({\n          type: stateChangeTypes.FunctionClearKeysSoFar,\n        })\n      }, 500)\n    }\n    if (!keysSoFar) {\n      return\n    }\n    clearTimeout.current()\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [keysSoFar])\n  /* Controls the focus on the menu or the toggle button. */\n  useEffect(() => {\n    // Don't focus menu on first render.\n    if (isInitialMount.current) {\n      // Unless it was initialised as open.\n      if (initialIsOpen || defaultIsOpen || isOpen) {\n        menuRef.current.focus()\n      }\n      return\n    }\n    // Focus menu on open.\n    // istanbul ignore next\n    if (isOpen) {\n      menuRef.current.focus()\n      // Focus toggleButton on close.\n    } else if (environment.document.activeElement === menuRef.current) {\n      toggleButtonRef.current.focus()\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [isOpen])\n  /* Scroll on highlighted item if change comes from keyboard. */\n  useEffect(() => {\n    if (highlightedIndex < 0 || !isOpen || !itemRefs.current.length) {\n      return\n    }\n    if (shouldScroll.current === false) {\n      shouldScroll.current = true\n    } else {\n      scrollIntoView(itemRefs.current[highlightedIndex], menuRef.current)\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [highlightedIndex])\n  /* Make initial ref false. */\n  useEffect(() => {\n    isInitialMount.current = false\n  }, [])\n\n  /* Event handler functions */\n  const menuKeyDownHandlers = {\n    ArrowDown(event) {\n      event.preventDefault()\n      dispatch({\n        type: stateChangeTypes.MenuKeyDownArrowDown,\n        shiftKey: event.shiftKey,\n      })\n    },\n    ArrowUp(event) {\n      event.preventDefault()\n      dispatch({\n        type: stateChangeTypes.MenuKeyDownArrowUp,\n        shiftKey: event.shiftKey,\n      })\n    },\n    Home(event) {\n      event.preventDefault()\n      dispatch({\n        type: stateChangeTypes.MenuKeyDownHome,\n      })\n    },\n    End(event) {\n      event.preventDefault()\n      dispatch({\n        type: stateChangeTypes.MenuKeyDownEnd,\n      })\n    },\n    Escape() {\n      dispatch({\n        type: stateChangeTypes.MenuKeyDownEscape,\n      })\n    },\n    Enter(event) {\n      event.preventDefault()\n      dispatch({\n        type: stateChangeTypes.MenuKeyDownEnter,\n      })\n    },\n    Tab(event) {\n      // The exception that calls MenuBlur.\n      // istanbul ignore next\n      if (event.shiftKey) {\n        dispatch({\n          type: stateChangeTypes.MenuBlur,\n        })\n      }\n    },\n  }\n  const toggleButtonKeyDownHandlers = {\n    ArrowDown(event) {\n      event.preventDefault()\n      dispatch({\n        type: stateChangeTypes.ToggleButtonKeyDownArrowDown,\n      })\n    },\n    ArrowUp(event) {\n      event.preventDefault()\n      dispatch({\n        type: stateChangeTypes.ToggleButtonKeyDownArrowUp,\n      })\n    },\n  }\n\n  // Event handlers.\n  const menuHandleKeyDown = event => {\n    const key = normalizeArrowKey(event)\n    if (key && menuKeyDownHandlers[key]) {\n      menuKeyDownHandlers[key](event)\n    } else if (isAcceptedCharacterKey(key)) {\n      dispatch({\n        type: stateChangeTypes.MenuKeyDownCharacter,\n        key,\n      })\n    }\n  }\n  // Focus going back to the toggleButton is something we control (Escape, Enter, Click).\n  // We are toggleing special actions for these cases in reducer, not MenuBlur.\n  // Since Shift-Tab also lands focus on toggleButton, we will handle it as exception and call MenuBlur.\n  const menuHandleBlur = event => {\n    if (event.relatedTarget !== toggleButtonRef.current) {\n      dispatch({\n        type: stateChangeTypes.MenuBlur,\n      })\n    }\n  }\n  const toggleButtonHandleClick = () => {\n    dispatch({\n      type: stateChangeTypes.ToggleButtonClick,\n    })\n  }\n  const toggleButtonHandleKeyDown = event => {\n    const key = normalizeArrowKey(event)\n    if (key && toggleButtonKeyDownHandlers[key]) {\n      toggleButtonKeyDownHandlers[key](event)\n    } else if (isAcceptedCharacterKey(key)) {\n      dispatch({\n        type: stateChangeTypes.ToggleButtonKeyDownCharacter,\n        key,\n      })\n    }\n  }\n  const itemHandleMouseMove = index => {\n    if (index === highlightedIndex) {\n      return\n    }\n    shouldScroll.current = false\n    dispatch({\n      type: stateChangeTypes.ItemMouseMove,\n      index,\n    })\n  }\n  const itemHandleClick = index => {\n    dispatch({\n      type: stateChangeTypes.ItemClick,\n      index,\n    })\n  }\n\n  // returns\n  const toggleMenu = () => {\n    dispatch({\n      type: stateChangeTypes.FunctionToggleMenu,\n    })\n  }\n  const closeMenu = () => {\n    dispatch({\n      type: stateChangeTypes.FunctionCloseMenu,\n    })\n  }\n  const openMenu = () => {\n    dispatch({\n      type: stateChangeTypes.FunctionOpenMenu,\n    })\n  }\n  const setHighlightedIndex = newHighlightedIndex => {\n    dispatch({\n      type: stateChangeTypes.FunctionSetHighlightedIndex,\n      highlightedIndex: newHighlightedIndex,\n    })\n  }\n  const selectItem = newSelectedItem => {\n    dispatch({\n      type: stateChangeTypes.FunctionSelectItem,\n      selectedItem: newSelectedItem,\n    })\n  }\n  const reset = () => {\n    dispatch({\n      type: stateChangeTypes.FunctionReset,\n    })\n  }\n  const getLabelProps = labelProps => ({\n    id: labelId,\n    ...labelProps,\n  })\n  const getMenuProps = ({\n    onKeyDown,\n    onBlur,\n    refKey = 'ref',\n    ref,\n    ...rest\n  } = {}) => ({\n    [refKey]: callAll(ref, menuNode => {\n      menuRef.current = menuNode\n    }),\n    id: menuId,\n    role: 'listbox',\n    'aria-labelledby': labelId,\n    tabIndex: -1,\n    ...(highlightedIndex > -1 && {\n      'aria-activedescendant': getItemId(highlightedIndex),\n    }),\n    onKeyDown: callAllEventHandlers(onKeyDown, menuHandleKeyDown),\n    onBlur: callAllEventHandlers(onBlur, menuHandleBlur),\n    ...rest,\n  })\n  const getToggleButtonProps = ({\n    onClick,\n    onKeyDown,\n    refKey = 'ref',\n    ref,\n    ...rest\n  } = {}) => ({\n    [refKey]: callAll(ref, toggleButtonNode => {\n      toggleButtonRef.current = toggleButtonNode\n    }),\n    id: toggleButtonId,\n    'aria-haspopup': 'listbox',\n    'aria-expanded': isOpen,\n    'aria-labelledby': `${labelId} ${toggleButtonId}`,\n    onClick: callAllEventHandlers(onClick, toggleButtonHandleClick),\n    onKeyDown: callAllEventHandlers(onKeyDown, toggleButtonHandleKeyDown),\n    ...rest,\n  })\n  const getItemProps = ({\n    item,\n    index,\n    refKey = 'ref',\n    ref,\n    onMouseMove,\n    onClick,\n    ...rest\n  } = {}) => {\n    const itemIndex = getItemIndex(index, item, items)\n    if (itemIndex < 0) {\n      throw new Error('Pass either item or item index in getItemProps!')\n    }\n    return {\n      [refKey]: callAll(ref, itemNode => {\n        if (itemNode) {\n          itemRefs.current.push(itemNode)\n        }\n      }),\n      role: 'option',\n      ...(itemIndex === highlightedIndex && {'aria-selected': true}),\n      id: getItemId(itemIndex),\n      onMouseMove: callAllEventHandlers(onMouseMove, () =>\n        itemHandleMouseMove(itemIndex),\n      ),\n      onClick: callAllEventHandlers(onClick, () => itemHandleClick(itemIndex)),\n      ...rest,\n    }\n  }\n\n  return {\n    // prop getters.\n    getToggleButtonProps,\n    getLabelProps,\n    getMenuProps,\n    getItemProps,\n    // actions.\n    toggleMenu,\n    openMenu,\n    closeMenu,\n    setHighlightedIndex,\n    selectItem,\n    reset,\n    // state.\n    highlightedIndex,\n    isOpen,\n    selectedItem,\n  }\n}\n\nexport default useSelect\n"],"names":["_objectWithoutPropertiesLoose","source","excluded","key","i","target","sourceKeys","Object","keys","length","indexOf","_extends","assign","arguments","prototype","hasOwnProperty","call","apply","this","_assertThisInitialized","self","ReferenceError","defineProperty","exports","value","b","Symbol","for","c","d","e","f","g","h","k","l","m","n","p","q","r","t","v","w","x","a","u","$$typeof","type","y","module","require$$0","isElement","el","nodeType","canOverflow","overflow","skipOverflowHiddenElements","isScrollable","clientHeight","scrollHeight","clientWidth","scrollWidth","style","getComputedStyle","overflowY","overflowX","alignNearest","scrollingEdgeStart","scrollingEdgeEnd","scrollingSize","scrollingBorderStart","scrollingBorderEnd","elementEdgeStart","elementEdgeEnd","elementSize","options","scrollMode","block","inline","boundary","checkBoundary","node","TypeError","scrollingElement","document","documentElement","frames","cursor","parentNode","push","body","viewportWidth","window","visualViewport","width","innerWidth","viewportHeight","height","innerHeight","viewportX","scrollX","pageXOffset","viewportY","scrollY","pageYOffset","_target$getBoundingCl","getBoundingClientRect","targetHeight","targetWidth","targetTop","top","targetRight","right","targetBottom","bottom","targetLeft","left","targetBlock","targetInline","computations","index","frame","_frame$getBoundingCli","_height","_width","_top","_left","frameStyle","borderLeft","parseInt","borderLeftWidth","borderTop","borderTopWidth","borderRight","borderRightWidth","borderBottom","borderBottomWidth","blockScroll","inlineScroll","scrollbarWidth","offsetWidth","scrollbarHeight","offsetHeight","Math","max","scrollLeft","scrollTop","min","idCounter","cbToCb","cb","noop","scrollIntoView","menuNode","computeScrollIntoView","forEach","isOrContainsNode","parent","child","contains","debounce","fn","time","timeoutId","cancel","clearTimeout","wrapper","args","setTimeout","callAllEventHandlers","fns","event","some","preventDownshiftDefault","nativeEvent","callAll","unwrapArray","arg","defaultValue","Array","isArray","stateKeys","pickState","state","result","normalizeArrowKey","keyCode","getNextWrappingIndex","moveAmount","baseIndex","itemCount","itemsLastIndex","newIndex","cleanupStatus","getStatusDiv","textContent","setStatus","status","documentProp","div","statusDiv","getElementById","createElement","setAttribute","border","clip","margin","padding","position","appendChild","unknown","itemMouseEnter","keyDownArrowUp","keyDownArrowDown","keyDownEscape","keyDownEnter","keyDownHome","keyDownEnd","clickItem","blurInput","changeInput","keyDownSpaceButton","clickButton","blurButton","Downshift","subClass","superClass","props","_Component","id","_this","String","menuId","labelId","inputId","getItemId","input","items","previousResultCount","timeoutIds","internalSetTimeout","filter","setItemCount","count","unsetItemCount","setHighlightedIndex","highlightedIndex","otherStateToSet","defaultHighlightedIndex","internalSetState","clearSelection","selectedItem","inputValue","isOpen","defaultIsOpen","selectItem","item","itemToString","selectItemAtIndex","itemIndex","selectHighlightedItem","getState","stateToSet","isItemSelected","onChangeArg","onStateChangeArg","isStateToSetFunction","onInputValueChange","getStateAndHelpers","setState","newStateToSet","stateReducer","nextState","nextFullState","stateChangeTypes","isControlledProp","onStateChange","onSelect","undefined","onChange","onUserAction","rootRef","_rootNode","getRootProps","refKey","ref","rest","suppressRefError","called","role","keyDownHandlers","ArrowDown","preventDefault","amount","shiftKey","moveHighlightedIndex","_this2","getItemCount","ArrowUp","_this3","Enter","itemNode","getItemNodeFromIndex","hasAttribute","Escape","reset","buttonKeyDownHandlers","toggleMenu","inputKeyDownHandlers","Home","highlightFirstOrLastIndex","End","getToggleButtonProps","onClick","onKeyDown","onPress","onKeyUp","onBlur","enabledEventHandlers","buttonHandleClick","buttonHandleKeyDown","buttonHandleKeyUp","buttonHandleBlur","disabled","environment","activeElement","focus","blurTarget","isMouseDown","getLabelProps","htmlFor","getInputProps","onInput","onChangeText","eventHandlers","inputHandleChange","inputHandleKeyDown","inputHandleBlur","autoComplete","downshiftButtonIsActive","dataset","toggle","menuRef","_menuNode","getMenuProps","getItemProps","onMouseMove","onMouseDown","customClickHandler","avoidScrolling","clearItems","openMenu","closeMenu","updateStatus","resultCount","getA11yStatusMessage","highlightedItem","setA11yStatus","initialHighlightedIndex","initialIsOpen","initialInputValue","initialSelectedItem","create","constructor","__proto__","internalClearTimeouts","stateToMerge","reduce","_this4","scrollHighlightedItemIntoView","nextHighlightedIndex","first","componentDidMount","targetWithinDownshift","checkActiveElement","_this5","contextNode","onMouseUp","onOuterClick","onTouchStart","isTouchMove","onTouchMove","onTouchEnd","contextWithinDownshift","addEventListener","cleanup","removeEventListener","shouldScroll","prevState","prevProps","currentHighlightedIndex","prevHighlightedIndex","componentDidUpdate","selectedItemChanged","componentWillUnmount","render","children","element","nodeName","isDOMElement","React","cloneElement","attributes","getElementProps","Component","defaultProps","prevItem","genId","useId","_useState","useState","setId","useEffect","itemsLength","circular","nextIndex","getItemIndexByCharacterKey","keysSoFar","itemToStringParam","newHighlightedIndex","itemStrings","map","toLowerCase","startPosition","slice","findIndex","itemString","startsWith","isAcceptedCharacterKey","test","capitalizeString","string","toUpperCase","callOnChangeProps","changes","stateKey","propKey","handler","invokeOnChangeHandler","defaultStateValues","getHighlightedIndexOnOpen","offset","getDefaultValue","defaultPropKey","getInitialValue","initialPropKey","propTypes","PropTypes","array","isRequired","func","getA11ySelectionMessage","circularNavigation","bool","number","any","defaultSelectedItem","toggleButtonId","onSelectedItemChange","onHighlightedIndexChange","onIsOpenChange","shape","MenuKeyDownArrowDown","MenuKeyDownArrowUp","MenuKeyDownEscape","MenuKeyDownHome","MenuKeyDownEnd","MenuKeyDownEnter","MenuKeyDownCharacter","MenuBlur","ItemMouseMove","ItemClick","ToggleButtonKeyDownCharacter","ToggleButtonKeyDownArrowDown","ToggleButtonKeyDownArrowUp","ToggleButtonClick","FunctionToggleMenu","FunctionOpenMenu","FunctionCloseMenu","FunctionSetHighlightedIndex","FunctionSelectItem","FunctionClearKeysSoFar","FunctionReset","downshiftSelectReducer","action","lowercasedKey","Error","validatePropTypes","caller","entries","checkPropTypes","name","getPropTypesValidator","useSelect","s","defaultScrollIntoView","userProps","reducer","initialState","enhancedReducer","useCallback","newState","useReducer","dispatch","useEnhancedReducer","getInitialState","dispatchWithoutProps","generateDefaultId","uniqueId","getElementIds","toggleButtonRef","useRef","itemRefs","current","isInitialMount","menuKeyDownHandlers","Tab","toggleButtonKeyDownHandlers","menuHandleKeyDown","menuHandleBlur","relatedTarget","toggleButtonHandleClick","toggleButtonHandleKeyDown","toggleButtonNode","labelProps","tabIndex","getItemIndex","itemHandleMouseMove","itemHandleClick","newSelectedItem"],"mappings":"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"}